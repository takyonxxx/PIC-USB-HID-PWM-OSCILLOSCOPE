CCS PCH C Compiler, Version 4.068, 61971               17-Þub-14 16:42

               Filename: main.lst

               ROM used: 8074 bytes (25%)
                         Largest free fragment is 24690
               RAM used: 1291 (63%) at main() level
                         1327 (65%) worst case
               Stack:    11 worst case (4 in main + 7 for interrupts)

*
0000:  GOTO   1AB8
*
0008:  MOVWF  05
000A:  MOVFF  FD8,06
000E:  MOVFF  FE0,07
0012:  MOVLB  0
0014:  MOVFF  FE9,0D
0018:  MOVFF  FEA,08
001C:  MOVFF  FE1,09
0020:  MOVFF  FE2,0A
0024:  MOVFF  FD9,0B
0028:  MOVFF  FDA,0C
002C:  MOVFF  FF3,14
0030:  MOVFF  FF4,15
0034:  MOVFF  FFA,16
0038:  MOVFF  00,0F
003C:  MOVFF  01,10
0040:  MOVFF  02,11
0044:  MOVFF  03,12
0048:  MOVFF  04,13
004C:  BTFSS  FA0.5
004E:  GOTO   0058
0052:  BTFSC  FA1.5
0054:  GOTO   0EBC
0058:  MOVFF  0F,00
005C:  MOVFF  10,01
0060:  MOVFF  11,02
0064:  MOVFF  12,03
0068:  MOVFF  13,04
006C:  BSF    0E.7
006E:  MOVFF  0D,FE9
0072:  MOVFF  08,FEA
0076:  MOVFF  09,FE1
007A:  MOVFF  0A,FE2
007E:  MOVFF  0B,FD9
0082:  MOVFF  0C,FDA
0086:  MOVFF  14,FF3
008A:  MOVFF  15,FF4
008E:  MOVFF  16,FFA
0092:  MOVF   05,W
0094:  MOVFF  07,FE0
0098:  MOVFF  06,FD8
009C:  RETFIE 0
.................... //printf("DATA: %f %f\r\n", (double) (adc_read1 * 5.0 / 1023.0),(double) (adc_read2 * 5.0 / 1023.0)); 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device ADC=10  
.................... #fuses HSPLL,USBDIV,PLL5,PUT,CPUDIV1,VREGEN,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOMCLR  
.................... #use delay(clock=20000000)  
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,STOP=1) 
.................... #define USB_HID_DEVICE     TRUE               
.................... #define USB_EP1_TX_ENABLE  USB_ENABLE_BULK     
.................... #define USB_EP1_RX_ENABLE  USB_ENABLE_BULK     
.................... #define USB_EP1_TX_SIZE   128  
.................... #define USB_EP1_RX_SIZE   8     
.................... #include <pic18_usb.h>       
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes: //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor //// 
.................... ////   usb.c - USB token and request handler code                    //// 
.................... ////   usb.h - definitions, prototypes and global variables          //// 
.................... ////                                                                 //// 
.................... //// The following examples are provided by CCS:                     //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                 //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.       //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple  //// 
.................... ////                      interfaces.                                //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple //// 
.................... ////                      HID Reports.                               //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom        //// 
.................... ////                    protocol requiring custom Windows drivers.   //// 
.................... ////   ex_usb_serial.c -                                             //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for   //// 
.................... ////     a virtual COM port.                                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on C4 or C5 depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on C3, even if you are using  //// 
.................... ////  the internal 3.3V USB regulator.                               //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ////    ****************   USER FUNCTIONS  ***********************   //// 
.................... ////                                                                 //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and  //// 
.................... ////              attaches the unit to the usb bus.  Enables         //// 
.................... ////              interrupts.                                        //// 
.................... ////                                                                 //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit      //// 
.................... ////              to usb bus or enable interrupts.                   //// 
.................... ////                                                                 //// 
.................... //// usb_put_packet() - Sends one packet to the host.                //// 
.................... ////                    If you need to send a message that spans     //// 
.................... ////                    more than one packet then see usb_puts() in  //// 
.................... ////                    usb.c                                        //// 
.................... ////                                                                 //// 
.................... //// usb_kbhit() - Returns true if OUT endpoint contains data from   //// 
.................... ////               host.                                             //// 
.................... ////                                                                 //// 
.................... //// usb_rx_packet_size() - Returns the size of packet that was      //// 
.................... ////               received.  usb_kbhit() must return TRUE else      //// 
.................... ////               this is not valid.  Don't forget in USB there     //// 
.................... ////               are 0 len packets!                                //// 
.................... ////                                                                 //// 
.................... //// usb_get_packet() - Gets one packet that from the host.          //// 
.................... ////                    usb_kbhit() must return true before you call //// 
.................... ////                    this routine or your data may not be valid.  //// 
.................... ////                    Once usb_kbhit() returns true you want to    //// 
.................... ////                    call this as soon as possible to get data    //// 
.................... ////                    out of the endpoint buffer so the PC can     //// 
.................... ////                    start sending more data, if needed.          //// 
.................... ////                    This only receives one packet, if you are    //// 
.................... ////                    trying to receive a multi-packet message     //// 
.................... ////                    see usb_gets() in usb.c.                     //// 
.................... ////                                                                 //// 
.................... //// usb_detach() - De-attach USB from the system.                   //// 
.................... ////                                                                 //// 
.................... //// usb_attach() - Attach USB to the system.                        //// 
.................... ////                                                                 //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a    //// 
.................... ////                  USB cable.  A macro that looks at the defined  //// 
.................... ////                  connection sense pin.                          //// 
.................... ////                                                                 //// 
.................... //// usb_task() - Keeps track of connection sense, calling           //// 
.................... ////              usb_detach() and usb_attach() when needed.         //// 
.................... ////                                                                 //// 
.................... //// For more documentation on these functions read the comments at  //// 
.................... //// each function.                                                  //// 
.................... ////                                                                 //// 
.................... //// The other functions defined in this file are for use by the     //// 
.................... //// USB code, and is not meant to be used by the user.              //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_HARDWARE__ 
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_BUFFER_SPACE  ((int16)getenv("RAM")-0x500) 
....................  #define USB_MAX_NUM_ENDPOINTS  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #if (USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+USB_EP15_TX_SIZE+USB_EP15_RX_SIZE)>0 
....................    #error This driver only supports endpoints 0, 1 and 2 for this chip. 
....................  #endif 
....................  #define USB_MAX_NUM_ENDPOINTS  3 
....................  #define USB_TOTAL_BUFFER_SPACE  (0x100 - USB_MAX_NUM_ENDPOINTS*8) 
.................... #else 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_BUFFER_SPACE  ((int16)0x300) 
....................  #define USB_MAX_NUM_ENDPOINTS  16 
.................... #endif 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
.................... #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #if defined(__USB_4450__) 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... ////                   **** DEFINITIONS *****                          //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (FALSE) - Set to TRUE if your device supports        //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            Only the 18Fxx5x USB peripheral can    //// 
.................... ////                            have a value larger than 8.            //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE  //set to false to opt for less RAM, true to opt for less ROM 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     0 
.................... #define USB_ENABLE_BULK         0x01 
.................... #define USB_ENABLE_ISOCHRONOUS  0x02 
.................... #define USB_ENABLE_INTERRUPT    0x03 
.................... #define USB_ENABLE_CONTROL      0x04 
....................  
.................... //// DO NOT CHANGE THE FOLLOWING VALUES: 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #else 
.................... struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #endif 
....................  
.................... int16 __usb_kbhit_status; 
....................  
.................... /// *** User function prototypes 
.................... void usb_wait_for_enumeration(void); 
.................... int1 usb_unermated(void); 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout); 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout); 
....................  
.................... /// *** Token and request hanlder function prototypes 
.................... void usb_token_reset(); 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_request_send_response(int len);   //always sends usb_ep0_rx_buffer[] to endpoint 0 with a toggle of DATA 
....................  
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tok_in_dne(int8 endpoint); 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
....................  
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
....................  
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
....................  
.................... void usb_finish_set_address(void); 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #define USB_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if (USB_BUFFER_NEEDED > USB_TOTAL_BUFFER_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if defined(__USB_4450__) 
....................  #reserve 0x400:0x4FF 
.................... #else 
....................  #reserve 0x400:0x4FF+USB_BUFFER_NEEDED 
.................... #endif 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #ifndef USB_USE_ERROR_COUNTER 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #ifndef USB_PING_PONG_MODE 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte USTAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte USTAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... #byte UEP0    =  UEP0_LOC 
....................  
.................... #if defined(__USB_4450__) 
....................  #define USB_BUFFER (0x400 + (USB_MAX_NUM_ENDPOINTS*8)) 
....................  //#define USB_BUFFER 0x418   //if you have an old compiler you will need to use this 
.................... #else 
....................  #define USB_BUFFER 0x500 
.................... #endif 
....................  
.................... #byte BD0STAT  =  0x400 
.................... #byte BD0CNT  =  0x401 
.................... #byte BD0ADRL  =  0x402 
.................... #byte BD0ADRJ  =  0x403 
....................  
.................... #define BD0STAT_LOC 0x400 
.................... #define BD0CNT_LOC  0x401 
.................... #define BD0ADRL_LOC 0x402 
.................... #define BD0ADRH_LOC 0x403 
....................  
.................... #define UEP(x) *(UEP0_LOC+x) 
....................  
.................... #BIT UIR_SOF = UIR.6 
.................... #BIT UIR_STALL = UIR.5 
.................... #BIT UIR_IDLE = UIR.4 
.................... #BIT UIR_TRN = UIR.3 
.................... #BIT UIR_ACTV = UIR.2 
.................... #BIT UIR_UERR = UIR.1 
.................... #BIT UIR_URST = UIR.0 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    *(BD0STAT_LOC + x*8) 
....................  #define EP_BDxCNT_O(x)    *(BD0CNT_LOC + x*8) 
....................  #define EP_BDxADR_O(x)   *(int16 *)(BD0ADRL_LOC + x*8) 
....................  #define EP_BDxST_I(x)    *(BD0STAT_LOC + 4 + x*8) 
....................  #define EP_BDxCNT_I(x)    *(BD0CNT_LOC + 4 + x*8) 
....................  #define EP_BDxADR_I(x)   *(int16 *)(BD0ADRL_LOC + 4 + x*8) 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS 0x3F 
.................... #else 
....................  #define STANDARD_INTS 0x3D 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #define __USB_UCFG_UTRDIS  0x08 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #define __UCFG_VAL_DISABLED__ 0x08 
....................  
.................... char usb_ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
.................... #locate usb_ep0_rx_buffer=USB_BUFFER 
....................  
.................... char usb_ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
.................... #locate usb_ep0_tx_buffer=USB_BUFFER+USB_MAX_EP0_PACKET_LENGTH 
....................  
.................... char usb_data_buffer[USB_TOTAL_BUFFER_SPACE-USB_MAX_EP0_PACKET_LENGTH-USB_MAX_EP0_PACKET_LENGTH]; 
.................... #locate usb_data_buffer=USB_BUFFER+USB_MAX_EP0_PACKET_LENGTH+USB_MAX_EP0_PACKET_LENGTH 
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //following functions standard part of CCS PIC USB driver, and used by usb.c 
.................... void usb_init(); 
.................... void usb_detach(); 
.................... int1 usb_put_packet(int endpoint, int * ptr, int16 len, USB_DTS_BIT tgl); 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); //marks the transmit buffer as ready for transmission 
.................... int16 usb_get_packet(int8 endpoint, int8 * ptr, int16 max); 
.................... int16 usb_rx_packet_size(int8 endpoint); 
.................... int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max); 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
.................... void usb_stall_ep(int8 endpoint); 
.................... void usb_unstall_ep(int8 endpoint); 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
.................... void usb_set_address(int8 address); 
.................... void usb_set_configured(int config); 
.................... void usb_disable_endpoints(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void) {  //done 
....................    UCON=0;  //disable USB hardware 
*
0F5C:  CLRF   F6D
....................    UIE=0;   //disable USB interrupts 
0F5E:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
0F60:  MOVLW  08
0F62:  MOVWF  F6F
....................    set_tris_c(*0xF94 | 0x30); 
0F64:  MOVF   F94,W
0F66:  IORLW  30
0F68:  MOVLB  1
0F6A:  MOVWF  F94
....................    usb_state=USB_STATE_DETACHED; 
0F6C:  CLRF   1F
0F6E:  CLRF   18
0F70:  BTFSC  FF2.7
0F72:  BSF    18.7
0F74:  BCF    FF2.7
....................    usb_token_reset();              //clear the chapter9 stack 
0F76:  MOVLB  0
0F78:  CALL   03EC
0F7C:  BTFSC  18.7
0F7E:  BSF    FF2.7
....................    __usb_kbhit_status=0; 
0F80:  CLRF   1E
0F82:  CLRF   1D
.................... } 
0F84:  GOTO   0FCE (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void) { 
0F88:  CLRF   18
0F8A:  BTFSC  FF2.7
0F8C:  BSF    18.7
0F8E:  BCF    FF2.7
....................    usb_token_reset(); 
0F90:  CALL   03EC
0F94:  BTFSC  18.7
0F96:  BSF    FF2.7
....................     UCON = 0; 
0F98:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
0F9A:  MOVLW  14
0F9C:  MOVWF  F6F
....................     UIE = 0;                                // Mask all USB interrupts 
0F9E:  CLRF   F69
....................     UCON_USBEN = 1;                     // Enable module & attach to bus 
0FA0:  BSF    F6D.3
....................     usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
0FA2:  MOVLW  01
0FA4:  MOVWF  1F
.................... } 
0FA6:  GOTO   0FB0 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: Resets and initalizes USB peripheral.  Does not attach the peripheral 
.................... /*          to the USB bus.  See usb_attach() and usb_task() on how to 
.................... /*          attach to the USB bus. 
.................... /* 
.................... /*          You must call this before any other USB code. 
.................... /* 
.................... /*          NOTE: an alternative function, usb_init(), is provided that 
.................... /*                initializes the USB and then connects. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #define usb_init_cs usb_detach 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: Keeps an eye on the connection sense pin to determine if we are 
.................... /*          attached to a USB cable or not.  If we are attached to a USB cable, 
.................... /*          initialize the USB peripheral if needed.  If we are disconnected 
.................... /*          from the USB cable, disable the USB peripheral. 
.................... /* 
.................... /*          NOTE: If you are not using a connection sense pin, will automatically 
.................... /*                enable the USB peripheral. 
.................... /* 
.................... /*          NOTE: this enables interrupts once the USB peripheral is ready 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void) { 
....................    if (usb_attached()) { 
....................       if (UCON_USBEN==0) { 
0FAA:  BTFSC  F6D.3
0FAC:  BRA    0FB0
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
0FAE:  BRA    0F88
....................       } 
....................    } 
....................    else { 
....................       if (UCON_USBEN==1)  { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0)) { 
0FB0:  DECFSZ 1F,W
0FB2:  BRA    0FCA
0FB4:  BTFSC  F6D.5
0FB6:  BRA    0FCA
....................       UIR=0; 
0FB8:  CLRF   F68
....................       UIE=0; 
0FBA:  CLRF   F69
....................       enable_interrupts(INT_USB); 
0FBC:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
0FBE:  MOVLW  C0
0FC0:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB interrupt 
0FC2:  MOVLW  11
0FC4:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
0FC6:  MOVLW  02
0FC8:  MOVWF  1F
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
0FCA:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: Resets and initalizes USB hardware.  You must call this first before 
.................... /*          using code.  Will attach the USB periperhal to the USB bus. 
.................... /* 
.................... /*          NOTE: If you are using a connection sense pin, this will wait in 
.................... /*                an infinite loop until the device is connected to a USB cable. 
.................... /* 
.................... /*          NOTE: If you are not using a connection sense pin, this will wait 
.................... /*                in an infinte loop until the SE0 condition clears, which usually 
.................... /*                doesn't take long 
.................... /* 
.................... /*          NOTE: this enables interrupts. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void) { 
....................    usb_init_cs(); 
0FCC:  BRA    0F5C
....................  
....................    do { 
....................       usb_task(); 
0FCE:  RCALL  0FAA
....................    } while (usb_state != USB_STATE_POWERED); 
0FD0:  MOVF   1F,W
0FD2:  SUBLW  02
0FD4:  BNZ   0FCE
.................... } 
0FD6:  GOTO   1B3E (RETURN)
....................  
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC) 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl) { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    i=EP_BDxST_I(endpoint); 
*
0C6C:  MOVLB  1
0C6E:  MOVF   x24,W
0C70:  MULLW  08
0C72:  MOVF   FF3,W
0C74:  ADDLW  04
0C76:  MOVWF  01
0C78:  MOVLW  04
0C7A:  MOVWF  03
0C7C:  BTFSC  FD8.0
0C7E:  INCF   03,F
0C80:  MOVFF  01,FE9
0C84:  MOVFF  03,FEA
0C88:  MOVFF  FEF,128
....................    if (!bit_test(i,7)) { 
0C8C:  BTFSC  x28.7
0C8E:  BRA    0D46
....................  
....................       EP_BDxCNT_I(endpoint)=len; 
0C90:  MOVF   x24,W
0C92:  MULLW  08
0C94:  MOVF   FF3,W
0C96:  ADDLW  05
0C98:  MOVWF  01
0C9A:  MOVLW  04
0C9C:  MOVWF  03
0C9E:  BTFSC  FD8.0
0CA0:  INCF   03,F
0CA2:  MOVFF  01,FE9
0CA6:  MOVFF  03,FEA
0CAA:  MOVFF  125,FEF
....................  
....................      debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE) { 
0CAE:  MOVF   x27,W
0CB0:  SUBLW  02
0CB2:  BNZ   0CE0
....................          i=EP_BDxST_I(endpoint); 
0CB4:  MOVF   x24,W
0CB6:  MULLW  08
0CB8:  MOVF   FF3,W
0CBA:  ADDLW  04
0CBC:  MOVWF  01
0CBE:  MOVLW  04
0CC0:  MOVWF  03
0CC2:  BTFSC  FD8.0
0CC4:  INCF   03,F
0CC6:  MOVFF  01,FE9
0CCA:  MOVFF  03,FEA
0CCE:  MOVFF  FEF,128
....................          if (bit_test(i,6)) 
0CD2:  BTFSS  x28.6
0CD4:  BRA    0CDA
....................             tgl=USB_DTS_DATA0;  //was DATA1, goto DATA0 
0CD6:  CLRF   x27
....................          else 
0CD8:  BRA    0CDE
....................             tgl=USB_DTS_DATA1;  //was DATA0, goto DATA1 
0CDA:  MOVLW  01
0CDC:  MOVWF  x27
....................       } 
....................       else if (tgl == USB_DTS_USERX) { 
0CDE:  BRA    0D06
0CE0:  MOVF   x27,W
0CE2:  SUBLW  04
0CE4:  BNZ   0D06
....................          i=EP_BDxST_O(endpoint); 
0CE6:  MOVF   x24,W
0CE8:  MULLW  08
0CEA:  MOVFF  FF3,01
0CEE:  MOVLW  04
0CF0:  MOVFF  01,FE9
0CF4:  MOVWF  FEA
0CF6:  MOVFF  FEF,128
....................          if (bit_test(i,6)) 
0CFA:  BTFSS  x28.6
0CFC:  BRA    0D04
....................             tgl=USB_DTS_DATA1; 
0CFE:  MOVLW  01
0D00:  MOVWF  x27
....................          else 
0D02:  BRA    0D06
....................             tgl=USB_DTS_DATA0; 
0D04:  CLRF   x27
....................       } 
....................       if (tgl == USB_DTS_DATA1) { 
0D06:  DECFSZ x27,W
0D08:  BRA    0D10
....................          i=0xC8;  //DATA1, UOWN 
0D0A:  MOVLW  C8
0D0C:  MOVWF  x28
....................       } 
....................       else if (tgl == USB_DTS_DATA0) { 
0D0E:  BRA    0D18
0D10:  MOVF   x27,F
0D12:  BNZ   0D18
....................          i=0x88; //DATA0, UOWN 
0D14:  MOVLW  88
0D16:  MOVWF  x28
....................       } 
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
0D18:  BTFSC  x26.0
0D1A:  BSF    x28.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
0D1C:  BTFSC  x26.1
0D1E:  BSF    x28.1
....................  
....................       debug_usb(debug_putc," %X",i); 
....................  
....................       EP_BDxST_I(endpoint)=i;//save changes 
0D20:  MOVF   x24,W
0D22:  MULLW  08
0D24:  MOVF   FF3,W
0D26:  ADDLW  04
0D28:  MOVWF  01
0D2A:  MOVLW  04
0D2C:  MOVWF  03
0D2E:  BTFSC  FD8.0
0D30:  INCF   03,F
0D32:  MOVFF  01,FE9
0D36:  MOVFF  03,FEA
0D3A:  MOVFF  128,FEF
....................  
....................       return(1); 
0D3E:  MOVLW  01
0D40:  MOVWF  01
0D42:  BRA    0D4A
....................    } 
....................     else { 
0D44:  BRA    0D46
....................          debug_usb(debug_putc,"\r\nPUT ERR"); 
....................     } 
....................    return(0); 
0D46:  MOVLW  00
0D48:  MOVWF  01
.................... } 
0D4A:  MOVLB  0
0D4C:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_put_packet(endpoint,*ptr,len,toggle) 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to 
.................... /*        ptr - points to data to send 
.................... /*        len - amount of data to send 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid, or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only reason it will 
.................... /*         return FALSE is if because the TX buffer is still full from the last time you 
.................... /*         tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a difference 
.................... /*          between a packet and a message.  If you wanted to send a 512 byte message you 
.................... /*          would accomplish this by sending 8 64-byte packets, followed by a 0 length packet. 
.................... /*          If the last (or only packet) being sent is less than the max packet size defined 
.................... /*          in your descriptor then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message correctly. 
.................... /* 
.................... /********************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl) { //done 
....................    int16 j; 
....................    int8 i; 
....................    int8 * buff_add;     
....................  
....................    i=EP_BDxST_I(endpoint); 
*
1504:  MOVLB  1
1506:  MOVF   x09,W
1508:  MULLW  08
150A:  MOVF   FF3,W
150C:  ADDLW  04
150E:  MOVWF  01
1510:  MOVLW  04
1512:  MOVWF  03
1514:  BTFSC  FD8.0
1516:  INCF   03,F
1518:  MOVFF  01,FE9
151C:  MOVFF  03,FEA
1520:  MOVFF  FEF,111
....................    if (!bit_test(i,7)) { 
1524:  BTFSC  x11.7
1526:  BRA    15B8
....................  
....................       buff_add=EP_BDxADR_I(endpoint); 
1528:  MOVF   x09,W
152A:  MULLW  08
152C:  MOVF   FF3,W
152E:  ADDLW  06
1530:  MOVWF  01
1532:  MOVLW  04
1534:  MOVWF  03
1536:  BTFSC  FD8.0
1538:  INCF   03,F
153A:  MOVFF  01,FE9
153E:  MOVFF  03,FEA
1542:  MOVFF  FEC,03
1546:  MOVF   FED,F
1548:  MOVFF  FEF,112
154C:  MOVFF  03,113
....................  
....................       for (j=0;j<len;j++) { 
1550:  CLRF   x10
1552:  CLRF   x0F
1554:  MOVF   x10,W
1556:  SUBWF  x0D,W
1558:  BNC   158E
155A:  BNZ   1562
155C:  MOVF   x0C,W
155E:  SUBWF  x0F,W
1560:  BC    158E
....................          *buff_add=*ptr; 
1562:  MOVFF  10A,FE9
1566:  MOVFF  10B,FEA
156A:  MOVFF  FEF,116
156E:  MOVFF  113,FEA
1572:  MOVFF  112,FE9
1576:  MOVFF  116,FEF
....................          buff_add++; 
157A:  INCF   x12,F
157C:  BTFSC  FD8.2
157E:  INCF   x13,F
....................          ptr++; 
1580:  INCF   x0A,F
1582:  BTFSC  FD8.2
1584:  INCF   x0B,F
....................       } 
1586:  INCF   x0F,F
1588:  BTFSC  FD8.2
158A:  INCF   x10,F
158C:  BRA    1554
158E:  CLRF   18
1590:  BTFSC  FF2.7
1592:  BSF    18.7
1594:  BCF    FF2.7
....................  
....................       return(usb_flush_in(endpoint, len, tgl)); 
1596:  MOVFF  109,124
159A:  MOVFF  10D,126
159E:  MOVFF  10C,125
15A2:  MOVFF  10E,127
15A6:  MOVLB  0
15A8:  CALL   0C6C
15AC:  BTFSC  18.7
15AE:  BSF    FF2.7
15B0:  MOVF   01,W
15B2:  BRA    15BC
....................     } 
....................     else { 
15B4:  BRA    15B6
15B6:  MOVLB  1
....................         debug_usb(debug_putc,"\r\nPUT ERR"); 
....................     } 
....................     return(0); 
15B8:  MOVLW  00
15BA:  MOVWF  01
15BC:  MOVLB  0
.................... } 
15BE:  GOTO   17A0 (RETURN)
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB.C 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC) 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl) { 
....................    int8 i; 
....................    int16 len; 
....................  
....................      #if USB_IGNORE_RX_DTS 
....................       if (tgl == USB_DTS_STALL) { 
....................          debug_usb(debug_putc, '*'); 
....................          i=0x84; 
....................          EP_BDxST_I(endpoint)=0x84; 
....................          return; 
....................       } 
....................       else 
....................          i=0x80; 
....................      #else 
....................       i=EP_BDxST_O(endpoint); 
*
0B7E:  MOVLB  1
0B80:  MOVF   x24,W
0B82:  MULLW  08
0B84:  MOVFF  FF3,01
0B88:  MOVLW  04
0B8A:  MOVFF  01,FE9
0B8E:  MOVWF  FEA
0B90:  MOVFF  FEF,126
....................       if (tgl == USB_DTS_TOGGLE) { 
0B94:  MOVF   x25,W
0B96:  SUBLW  02
0B98:  BNZ   0BA6
....................          if (bit_test(i,6)) 
0B9A:  BTFSS  x26.6
0B9C:  BRA    0BA2
....................             tgl=USB_DTS_DATA0;  //was DATA1, goto DATA0 
0B9E:  CLRF   x25
....................          else 
0BA0:  BRA    0BA6
....................             tgl=USB_DTS_DATA1;  //was DATA0, goto DATA1 
0BA2:  MOVLW  01
0BA4:  MOVWF  x25
....................       } 
....................       if (tgl == USB_DTS_STALL) { 
0BA6:  MOVF   x25,W
0BA8:  SUBLW  03
0BAA:  BNZ   0BD0
....................          i=0x84; 
0BAC:  MOVLW  84
0BAE:  MOVWF  x26
....................          EP_BDxST_I(endpoint)=0x84; //stall both in and out endpoints 
0BB0:  MOVF   x24,W
0BB2:  MULLW  08
0BB4:  MOVF   FF3,W
0BB6:  ADDLW  04
0BB8:  MOVWF  01
0BBA:  MOVLW  04
0BBC:  MOVWF  03
0BBE:  BTFSC  FD8.0
0BC0:  INCF   03,F
0BC2:  MOVFF  01,FE9
0BC6:  MOVFF  03,FEA
0BCA:  MOVLW  84
0BCC:  MOVWF  FEF
....................       } 
....................       else if (tgl == USB_DTS_DATA1) { 
0BCE:  BRA    0BE2
0BD0:  DECFSZ x25,W
0BD2:  BRA    0BDA
....................          i=0xC8;  //DATA1, UOWN 
0BD4:  MOVLW  C8
0BD6:  MOVWF  x26
....................       } 
....................       else if (tgl == USB_DTS_DATA0) { 
0BD8:  BRA    0BE2
0BDA:  MOVF   x25,F
0BDC:  BNZ   0BE2
....................          i=0x88; //DATA0, UOWN 
0BDE:  MOVLW  88
0BE0:  MOVWF  x26
....................       } 
....................      #endif 
....................  
....................    bit_clear(__usb_kbhit_status,endpoint); 
0BE2:  CLRF   03
0BE4:  MOVLW  01
0BE6:  MOVWF  02
0BE8:  MOVF   x24,W
0BEA:  MOVWF  00
0BEC:  BZ    0BF8
0BEE:  BCF    FD8.0
0BF0:  RLCF   02,F
0BF2:  RLCF   03,F
0BF4:  DECFSZ 00,F
0BF6:  BRA    0BEE
0BF8:  MOVF   02,W
0BFA:  XORLW  FF
0BFC:  MOVWF  00
0BFE:  MOVLW  FF
0C00:  XORWF  03,F
0C02:  MOVF   00,W
0C04:  ANDWF  1D,F
0C06:  MOVF   03,W
0C08:  ANDWF  1E,F
....................  
....................    len=usb_ep_rx_size[endpoint]; 
0C0A:  BCF    FD8.0
0C0C:  RLCF   x24,W
0C0E:  CLRF   03
0C10:  MOVFF  FF2,129
0C14:  BCF    FF2.7
0C16:  MOVLB  0
0C18:  CALL   00EE
0C1C:  TBLRD*+
0C1E:  MOVFF  FF5,03
0C22:  MOVLB  1
0C24:  BTFSC  x29.7
0C26:  BSF    FF2.7
0C28:  MOVWF  x27
0C2A:  MOVFF  03,128
....................    EP_BDxCNT_O(endpoint)=len; 
0C2E:  MOVF   x24,W
0C30:  MULLW  08
0C32:  MOVF   FF3,W
0C34:  ADDLW  01
0C36:  MOVWF  01
0C38:  MOVLW  04
0C3A:  MOVWF  03
0C3C:  BTFSC  FD8.0
0C3E:  INCF   03,F
0C40:  MOVFF  01,FE9
0C44:  MOVFF  03,FEA
0C48:  MOVFF  127,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
0C4C:  BTFSC  x28.0
0C4E:  BSF    x26.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
0C50:  BTFSC  x28.1
0C52:  BSF    x26.1
....................  
....................  
....................    EP_BDxST_O(endpoint)=i; 
0C54:  MOVF   x24,W
0C56:  MULLW  08
0C58:  MOVFF  FF3,01
0C5C:  MOVLW  04
0C5E:  MOVFF  01,FE9
0C62:  MOVWF  FEA
0C64:  MOVFF  126,FEF
.................... } 
0C68:  MOVLB  0
0C6A:  RETLW  00
....................  
.................... int16 usb_rx_packet_size(int8 endpoint) { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /********************************************************************************/ 
.................... int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max) { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al=EP_BDxADR_O(endpoint); 
*
0FE6:  MOVLB  1
0FE8:  MOVF   x0E,W
0FEA:  MULLW  08
0FEC:  MOVF   FF3,W
0FEE:  ADDLW  02
0FF0:  MOVWF  01
0FF2:  MOVLW  04
0FF4:  MOVWF  03
0FF6:  BTFSC  FD8.0
0FF8:  INCF   03,F
0FFA:  MOVFF  01,FE9
0FFE:  MOVFF  03,FEA
1002:  MOVFF  FEC,03
1006:  MOVF   FED,F
1008:  MOVFF  FEF,113
100C:  MOVFF  03,114
....................    i=EP_BDxCNT_O(endpoint); 
1010:  MOVF   x0E,W
1012:  MULLW  08
1014:  MOVF   FF3,W
1016:  ADDLW  01
1018:  MOVWF  01
101A:  MOVLW  04
101C:  MOVWF  03
101E:  BTFSC  FD8.0
1020:  INCF   03,F
1022:  MOVFF  01,FE9
1026:  MOVFF  03,FEA
102A:  MOVF   FEF,W
102C:  CLRF   03
102E:  MOVWF  x16
1030:  MOVFF  03,117
....................    st=EP_BDxST_O(endpoint); 
1034:  MOVF   x0E,W
1036:  MULLW  08
1038:  MOVFF  FF3,01
103C:  MOVLW  04
103E:  MOVFF  01,FE9
1042:  MOVWF  FEA
1044:  MOVFF  FEF,115
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
1048:  BTFSC  x15.0
104A:  BSF    x17.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
104C:  BTFSC  x15.1
104E:  BSF    x17.1
....................  
....................    if (i<max) {max=i;} 
1050:  MOVF   x17,W
1052:  SUBWF  x12,W
1054:  BNC   1066
1056:  BNZ   105E
1058:  MOVF   x11,W
105A:  SUBWF  x16,W
105C:  BC    1066
105E:  MOVFF  117,112
1062:  MOVFF  116,111
....................  
....................    i=0; 
1066:  CLRF   x17
1068:  CLRF   x16
....................  
....................    while (i<max) { 
106A:  MOVF   x17,W
106C:  SUBWF  x12,W
106E:  BNC   10A4
1070:  BNZ   1078
1072:  MOVF   x11,W
1074:  SUBWF  x16,W
1076:  BC    10A4
....................        *ptr=*al; 
1078:  MOVFF  113,FE9
107C:  MOVFF  114,FEA
1080:  MOVFF  FEF,11A
1084:  MOVFF  110,FEA
1088:  MOVFF  10F,FE9
108C:  MOVFF  11A,FEF
....................        ptr++; 
1090:  INCF   x0F,F
1092:  BTFSC  FD8.2
1094:  INCF   x10,F
....................        al++; 
1096:  INCF   x13,F
1098:  BTFSC  FD8.2
109A:  INCF   x14,F
....................        i++; 
109C:  INCF   x16,F
109E:  BTFSC  FD8.2
10A0:  INCF   x17,F
....................    } 
10A2:  BRA    106A
....................  
....................    return(max); 
10A4:  MOVFF  111,01
10A8:  MOVFF  112,02
.................... } 
10AC:  MOVLB  0
10AE:  GOTO   10C8 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC RAM. 
.................... /*          Until you call usb_get_packet() the data will sit in the endpoint 
.................... /*          buffer and the PC will get NAKs when it tries to write more data 
.................... /*          to the endpoint. 
.................... /* 
.................... /********************************************************************************/ 
.................... int16 usb_get_packet(int8 endpoint, int8 * ptr, int16 max) { 
....................  
....................    max=usb_get_packet_buffer(endpoint,ptr,max); 
10B2:  MOVFF  109,10E
10B6:  MOVFF  10B,110
10BA:  MOVFF  10A,10F
10BE:  MOVFF  10D,112
10C2:  MOVFF  10C,111
10C6:  BRA    0FE6
10C8:  MOVFF  02,10D
10CC:  MOVFF  01,10C
10D0:  CLRF   18
10D2:  BTFSC  FF2.7
10D4:  BSF    18.7
10D6:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
10D8:  MOVFF  109,124
10DC:  MOVLW  02
10DE:  MOVLB  1
10E0:  MOVWF  x25
10E2:  MOVLB  0
10E4:  RCALL  0B7E
10E6:  BTFSC  18.7
10E8:  BSF    FF2.7
....................  
....................    return(max); 
10EA:  MOVLB  1
10EC:  MOVFF  10C,01
10F0:  MOVFF  10D,02
.................... } 
10F4:  MOVLB  0
10F6:  GOTO   1BB2 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /********************************************************************************/ 
.................... int8 usb_tbe(int8 endpoint) { 
....................    int8 st; 
....................    st=EP_BDxST_I(endpoint); 
....................    if (!bit_test(st,7)) 
....................       return(TRUE); 
....................    return(FALSE); 
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_stall_ep(endpoint,direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will send STALL packet 
.................... /*          if the host tries to access this endpoint's buffer. 
.................... /* 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK THIS 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint) {  //done 
....................    int1 direction; 
....................    direction=bit_test(endpoint,7); 
*
0A3A:  MOVLB  1
0A3C:  BCF    x25.0
0A3E:  BTFSC  x24.7
0A40:  BSF    x25.0
....................    endpoint&=0x7F; 
0A42:  BCF    x24.7
....................    if (direction) { 
0A44:  BTFSS  x25.0
0A46:  BRA    0A68
....................       EP_BDxST_I(endpoint)=0x84; 
0A48:  MOVF   x24,W
0A4A:  MULLW  08
0A4C:  MOVF   FF3,W
0A4E:  ADDLW  04
0A50:  MOVWF  01
0A52:  MOVLW  04
0A54:  MOVWF  03
0A56:  BTFSC  FD8.0
0A58:  INCF   03,F
0A5A:  MOVFF  01,FE9
0A5E:  MOVFF  03,FEA
0A62:  MOVLW  84
0A64:  MOVWF  FEF
....................    } 
....................    else { 
0A66:  BRA    0A7C
....................       EP_BDxST_O(endpoint)=0x84; 
0A68:  MOVF   x24,W
0A6A:  MULLW  08
0A6C:  MOVFF  FF3,01
0A70:  MOVLW  04
0A72:  MOVFF  01,FE9
0A76:  MOVWF  FEA
0A78:  MOVLW  84
0A7A:  MOVWF  FEF
....................    } 
.................... } 
0A7C:  MOVLB  0
0A7E:  GOTO   0B0E (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK THIS 
.................... /********************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint) {   //done 
....................    int1 direction; 
....................    direction=bit_test(endpoint,7); 
*
09F4:  MOVLB  1
09F6:  BCF    x25.0
09F8:  BTFSC  x24.7
09FA:  BSF    x25.0
....................    endpoint&=0x7F; 
09FC:  BCF    x24.7
....................    if (direction) { 
09FE:  BTFSS  x25.0
0A00:  BRA    0A22
....................       #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint)=0x80; 
....................       #else 
....................       EP_BDxST_I(endpoint)=0x88; 
0A02:  MOVF   x24,W
0A04:  MULLW  08
0A06:  MOVF   FF3,W
0A08:  ADDLW  04
0A0A:  MOVWF  01
0A0C:  MOVLW  04
0A0E:  MOVWF  03
0A10:  BTFSC  FD8.0
0A12:  INCF   03,F
0A14:  MOVFF  01,FE9
0A18:  MOVFF  03,FEA
0A1C:  MOVLW  88
0A1E:  MOVWF  FEF
....................       #endif 
....................    } 
....................    else { 
0A20:  BRA    0A34
....................       EP_BDxST_O(endpoint)=0x00; 
0A22:  MOVF   x24,W
0A24:  MULLW  08
0A26:  MOVFF  FF3,01
0A2A:  MOVLW  04
0A2C:  MOVFF  01,FE9
0A30:  MOVWF  FEA
0A32:  CLRF   FEF
....................    } 
.................... } 
0A34:  MOVLB  0
0A36:  GOTO   0AFE (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_endpoint_stalled(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and Clear_Feature 
.................... /*          Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK THIS 
.................... /********************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint) {   //done 
....................    int1 direction; 
....................    int8 st; 
....................    direction=bit_test(endpoint,7); 
*
0A82:  MOVLB  1
0A84:  BCF    x25.0
0A86:  BTFSC  x24.7
0A88:  BSF    x25.0
....................    endpoint&=0x7F; 
0A8A:  BCF    x24.7
....................    if (direction) { 
0A8C:  BTFSS  x25.0
0A8E:  BRA    0AB0
....................       st=EP_BDxST_I(endpoint); 
0A90:  MOVF   x24,W
0A92:  MULLW  08
0A94:  MOVF   FF3,W
0A96:  ADDLW  04
0A98:  MOVWF  01
0A9A:  MOVLW  04
0A9C:  MOVWF  03
0A9E:  BTFSC  FD8.0
0AA0:  INCF   03,F
0AA2:  MOVFF  01,FE9
0AA6:  MOVFF  03,FEA
0AAA:  MOVFF  FEF,126
....................    } 
....................    else { 
0AAE:  BRA    0AC4
....................       st=EP_BDxST_O(endpoint); 
0AB0:  MOVF   x24,W
0AB2:  MULLW  08
0AB4:  MOVFF  FF3,01
0AB8:  MOVLW  04
0ABA:  MOVFF  01,FE9
0ABE:  MOVWF  FEA
0AC0:  MOVFF  FEF,126
....................    } 
....................    return(bit_test(st,7) && bit_test(st,2)); 
0AC4:  BTFSS  x26.7
0AC6:  BRA    0ACC
0AC8:  BTFSC  x26.2
0ACA:  BRA    0AD0
0ACC:  MOVLW  00
0ACE:  BRA    0AD2
0AD0:  MOVLW  01
0AD2:  MOVWF  01
.................... } 
0AD4:  MOVLB  0
0AD6:  GOTO   0B26 (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.  The host 
.................... /*          will now talk to use with the following address. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_set_address(int8 address) {   //done 
....................    UADDR=address; 
*
0D80:  MOVFF  125,F6E
....................    if (address) { 
0D84:  MOVLB  1
0D86:  MOVF   x25,F
0D88:  BZ    0D90
....................       usb_state=USB_STATE_ADDRESS; 
0D8A:  MOVLW  04
0D8C:  MOVWF  1F
....................    } 
....................    else { 
0D8E:  BRA    0D94
....................       usb_state=USB_STATE_POWERED; 
0D90:  MOVLW  02
0D92:  MOVWF  1F
....................    } 
.................... } 
0D94:  MOVLB  0
0D96:  GOTO   0DA4 (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_set_configured(config) 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_set_configured(int config) { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................       if (config==0) { 
*
067E:  MOVLB  1
0680:  MOVF   x24,F
0682:  BNZ   0690
....................          //if config=0 then set addressed state 
....................          usb_state=USB_STATE_ADDRESS; 
0684:  MOVLW  04
0686:  MOVWF  1F
....................          usb_disable_endpoints(); 
0688:  MOVLB  0
068A:  RCALL  0414
....................       } 
....................       else { 
068C:  BRA    082A
068E:  MOVLB  1
....................          usb_state=USB_STATE_CONFIGURED; //else set configed state 
0690:  MOVLW  05
0692:  MOVWF  1F
....................          addy=(int16)USB_BUFFER+(2*USB_MAX_EP0_PACKET_LENGTH); 
0694:  MOVWF  x27
0696:  MOVLW  80
0698:  MOVWF  x26
....................          for (en=1;en<16;en++) { 
069A:  MOVLW  01
069C:  MOVWF  x25
069E:  MOVF   x25,W
06A0:  SUBLW  0F
06A2:  BTFSS  FD8.0
06A4:  BRA    082A
....................             new_uep=0; 
06A6:  CLRF   x28
....................             if (usb_ep_rx_type[en]!=USB_ENABLE_DISABLED) { 
06A8:  CLRF   03
06AA:  MOVF   x25,W
06AC:  MOVFF  FF2,12C
06B0:  BCF    FF2.7
06B2:  MOVLB  0
06B4:  RCALL  009E
06B6:  MOVLB  1
06B8:  BTFSC  x2C.7
06BA:  BSF    FF2.7
06BC:  XORLW  00
06BE:  BZ    076A
....................                new_uep=0x04; 
06C0:  MOVLW  04
06C2:  MOVWF  x28
....................                len=usb_ep_rx_size[en]; 
06C4:  BCF    FD8.0
06C6:  RLCF   x25,W
06C8:  CLRF   03
06CA:  MOVFF  FF2,12C
06CE:  BCF    FF2.7
06D0:  MOVLB  0
06D2:  RCALL  00EE
06D4:  TBLRD*+
06D6:  MOVFF  FF5,03
06DA:  MOVLB  1
06DC:  BTFSC  x2C.7
06DE:  BSF    FF2.7
06E0:  MOVWF  x29
06E2:  MOVFF  03,12A
....................                EP_BDxCNT_O(en)=len; 
06E6:  MOVF   x25,W
06E8:  MULLW  08
06EA:  MOVF   FF3,W
06EC:  ADDLW  01
06EE:  MOVWF  01
06F0:  MOVLW  04
06F2:  MOVWF  03
06F4:  BTFSC  FD8.0
06F6:  INCF   03,F
06F8:  MOVFF  01,FE9
06FC:  MOVFF  03,FEA
0700:  MOVFF  129,FEF
....................                EP_BDxADR_O(en)=addy; 
0704:  MOVF   x25,W
0706:  MULLW  08
0708:  MOVF   FF3,W
070A:  ADDLW  02
070C:  MOVWF  01
070E:  MOVLW  04
0710:  MOVWF  03
0712:  BTFSC  FD8.0
0714:  INCF   03,F
0716:  MOVFF  01,FE9
071A:  MOVFF  03,FEA
071E:  MOVFF  127,FEC
0722:  MOVF   FED,F
0724:  MOVFF  126,FEF
....................                addy+=usb_ep_rx_size[en]; 
0728:  BCF    FD8.0
072A:  RLCF   x25,W
072C:  CLRF   03
072E:  MOVFF  FF2,12C
0732:  BCF    FF2.7
0734:  MOVLB  0
0736:  RCALL  00EE
0738:  TBLRD*+
073A:  MOVFF  FF5,03
073E:  MOVLB  1
0740:  BTFSC  x2C.7
0742:  BSF    FF2.7
0744:  ADDWF  x26,F
0746:  MOVF   03,W
0748:  ADDWFC x27,F
....................                #if USB_IGNORE_RX_DTS 
....................                   i=0x80; 
....................                #else 
....................                   i=0x88; 
074A:  MOVLW  88
074C:  MOVWF  x2B
....................                #endif 
....................                if (bit_test(len,8)) {bit_set(i,0);} 
074E:  BTFSC  x2A.0
0750:  BSF    x2B.0
....................                if (bit_test(len,9)) {bit_set(i,1);} 
0752:  BTFSC  x2A.1
0754:  BSF    x2B.1
....................                EP_BDxST_O(en)=i; 
0756:  MOVF   x25,W
0758:  MULLW  08
075A:  MOVFF  FF3,01
075E:  MOVLW  04
0760:  MOVFF  01,FE9
0764:  MOVWF  FEA
0766:  MOVFF  12B,FEF
....................             } 
....................             if (usb_ep_tx_type[en]!=USB_ENABLE_DISABLED) { 
076A:  CLRF   03
076C:  MOVF   x25,W
076E:  MOVFF  FF2,12C
0772:  BCF    FF2.7
0774:  MOVLB  0
0776:  RCALL  009E
0778:  MOVLB  1
077A:  BTFSC  x2C.7
077C:  BSF    FF2.7
077E:  XORLW  00
0780:  BZ    07E8
....................                new_uep|=0x02; 
0782:  BSF    x28.1
....................                EP_BDxADR_I(en)=addy; 
0784:  MOVF   x25,W
0786:  MULLW  08
0788:  MOVF   FF3,W
078A:  ADDLW  06
078C:  MOVWF  01
078E:  MOVLW  04
0790:  MOVWF  03
0792:  BTFSC  FD8.0
0794:  INCF   03,F
0796:  MOVFF  01,FE9
079A:  MOVFF  03,FEA
079E:  MOVFF  127,FEC
07A2:  MOVF   FED,F
07A4:  MOVFF  126,FEF
....................                addy+=usb_ep_tx_size[en]; 
07A8:  BCF    FD8.0
07AA:  RLCF   x25,W
07AC:  CLRF   03
07AE:  MOVFF  FF2,12C
07B2:  BCF    FF2.7
07B4:  MOVLB  0
07B6:  RCALL  00BE
07B8:  TBLRD*+
07BA:  MOVFF  FF5,03
07BE:  MOVLB  1
07C0:  BTFSC  x2C.7
07C2:  BSF    FF2.7
07C4:  ADDWF  x26,F
07C6:  MOVF   03,W
07C8:  ADDWFC x27,F
....................                EP_BDxST_I(en)=0x40; 
07CA:  MOVF   x25,W
07CC:  MULLW  08
07CE:  MOVF   FF3,W
07D0:  ADDLW  04
07D2:  MOVWF  01
07D4:  MOVLW  04
07D6:  MOVWF  03
07D8:  BTFSC  FD8.0
07DA:  INCF   03,F
07DC:  MOVFF  01,FE9
07E0:  MOVFF  03,FEA
07E4:  MOVLW  40
07E6:  MOVWF  FEF
....................             } 
....................             if (new_uep==0x06) {new_uep=0x0E;} 
07E8:  MOVF   x28,W
07EA:  SUBLW  06
07EC:  BNZ   07F2
07EE:  MOVLW  0E
07F0:  MOVWF  x28
....................             if (usb_ep_tx_type[en]!=USB_ENABLE_ISOCHRONOUS) { 
07F2:  CLRF   03
07F4:  MOVF   x25,W
07F6:  MOVFF  FF2,12C
07FA:  BCF    FF2.7
07FC:  MOVLB  0
07FE:  RCALL  009E
0800:  MOVLB  1
0802:  BTFSC  x2C.7
0804:  BSF    FF2.7
0806:  SUBLW  02
0808:  BZ    080C
....................                new_uep|=0x10; 
080A:  BSF    x28.4
....................             } 
....................             UEP(en)=new_uep; 
080C:  MOVLW  70
080E:  ADDWF  x25,W
0810:  MOVWF  01
0812:  MOVLW  0F
0814:  MOVWF  03
0816:  BTFSC  FD8.0
0818:  INCF   03,F
081A:  MOVFF  01,FE9
081E:  MOVFF  03,FEA
0822:  MOVFF  128,FEF
....................          } 
0826:  INCF   x25,F
0828:  BRA    069E
082A:  MOVLB  0
....................       } 
.................... } 
082C:  GOTO   08D2 (RETURN)
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... /******************************************************************************* 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt method), 
.................... /*       then you must call this function rapidly.  If there is more than 10ms 
.................... /*       latency the PC may think the USB device is stalled and disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this fuction. 
.................... /*       Also, goto usb_init() and remove the code that enables the USB interrupt. 
.................... /********************************************************************************/ 
.................... #int_usb 
.................... void usb_isr() { 
....................    if (usb_state==USB_STATE_DETACHED) return;   //should never happen, though 
*
0EBC:  MOVF   1F,F
0EBE:  BNZ   0EC2
0EC0:  BRA    0F20
....................    if (UIR) { 
0EC2:  MOVF   F68,F
0EC4:  BZ    0F20
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();}  //activity detected.  (only enable after sleep) 
0EC6:  BTFSS  F68.2
0EC8:  BRA    0ED2
0ECA:  BTFSS  F69.2
0ECC:  BRA    0ED2
0ECE:  GOTO   03DA
....................  
....................       if (UCON_SUSPND) return; 
0ED2:  BTFSS  F6D.1
0ED4:  BRA    0ED8
0ED6:  BRA    0F20
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
0ED8:  BTFSS  F68.1
0EDA:  BRA    0EE4
0EDC:  BTFSS  F69.1
0EDE:  BRA    0EE4
0EE0:  GOTO   03E4
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
0EE4:  BTFSS  F68.0
0EE6:  BRA    0EF0
0EE8:  BTFSS  F69.0
0EEA:  BRA    0EF0
0EEC:  GOTO   0462
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
0EF0:  BTFSS  F68.4
0EF2:  BRA    0EFC
0EF4:  BTFSS  F69.4
0EF6:  BRA    0EFC
0EF8:  GOTO   048C
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
0EFC:  BTFSS  F68.6
0EFE:  BRA    0F08
0F00:  BTFSS  F69.6
0F02:  BRA    0F08
0F04:  GOTO   0496
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
0F08:  BTFSS  F68.5
0F0A:  BRA    0F14
0F0C:  BTFSS  F69.5
0F0E:  BRA    0F14
0F10:  GOTO   049C
....................  
....................       if (UIR_TRN && UIE_TRN) { 
0F14:  BTFSS  F68.3
0F16:  BRA    0F20
0F18:  BTFSS  F69.3
0F1A:  BRA    0F20
....................          usb_isr_tok_dne(); 
0F1C:  BRA    0DCC
....................          UIR_TRN=0;    // clear the token done interrupt., 0x190.3 
0F1E:  BCF    F68.3
....................       }    //a token has been detected (majority of isrs) 
....................    } 
.................... } 
....................  
.................... //SOF interrupt not handled.  user must add this depending on application 
0F20:  BCF    FA1.5
0F22:  GOTO   0058
.................... void usb_isr_sof(void) { 
....................    debug_usb(debug_putc,"\r\nSOF"); 
....................    UIR_SOF=0; 
*
0496:  BCF    F68.6
.................... } 
0498:  GOTO   0F08 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints 1 thru 15 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoints(void) { 
....................    int8 i; 
....................    for (i=1;i<16;i++) { 
*
0414:  MOVLW  01
0416:  MOVLB  1
0418:  MOVWF  x2C
041A:  MOVF   x2C,W
041C:  SUBLW  0F
041E:  BNC   043C
....................       UEP(i)=ENDPT_DISABLED; 
0420:  MOVLW  70
0422:  ADDWF  x2C,W
0424:  MOVWF  01
0426:  MOVLW  0F
0428:  MOVWF  03
042A:  BTFSC  FD8.0
042C:  INCF   03,F
042E:  MOVFF  01,FE9
0432:  MOVFF  03,FEA
0436:  CLRF   FEF
....................    } 
0438:  INCF   x2C,F
043A:  BRA    041A
....................    __usb_kbhit_status=0; 
043C:  CLRF   1E
043E:  CLRF   1D
.................... } 
0440:  MOVLB  0
0442:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_rst() { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR=0; 
*
0462:  CLRF   F6A
....................    UIR=0; 
0464:  CLRF   F68
....................    UEIE=0x9F; 
0466:  MOVLW  9F
0468:  MOVWF  F6B
....................    UIE=STANDARD_INTS & ~__USB_UIF_ACTIVE; 
046A:  MOVLW  39
046C:  MOVWF  F69
....................  
....................    UADDR=0; 
046E:  CLRF   F6E
....................  
....................    usb_token_reset(); 
0470:  RCALL  03EC
....................  
....................    usb_disable_endpoints(); 
0472:  RCALL  0414
....................  
....................    UEP(0)=ENDPT_CONTROL | 0x10; 
0474:  MOVLW  16
0476:  MOVWF  F70
....................  
....................    while (UIR_TRN) { 
0478:  BTFSS  F68.3
047A:  BRA    0480
....................       UIR_TRN=0;    //do this to clear out the ustat fifo 
047C:  BCF    F68.3
....................    } 
047E:  BRA    0478
....................  
....................    UCON_PKTDIS=0; //SIE token and packet processing enabled 
0480:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
0482:  RCALL  0444
....................  
....................    usb_state=USB_STATE_DEFAULT; //put usb mcu into default state 
0484:  MOVLW  03
0486:  MOVWF  1F
.................... } 
0488:  GOTO   0EF0 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void) { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
0444:  MOVLW  40
0446:  MOVLB  4
0448:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_BUFFER; 
044A:  MOVLW  05
044C:  MOVWF  x03
044E:  CLRF   x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
0450:  MOVLW  88
0452:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
0454:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_BUFFER + (int16)USB_MAX_EP0_PACKET_LENGTH; 
0456:  MOVLW  05
0458:  MOVWF  x07
045A:  MOVLW  40
045C:  MOVWF  x06
.................... } 
045E:  MOVLB  0
0460:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr() { 
.................... #if USB_USE_ERROR_COUNTER 
....................    int ints; 
.................... #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) ) { //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) ) {  //increment crc5 error counter 
....................       debug_usbdebug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) ) {  //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) ) {  //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) ) {  //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) ) { //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
.................... #endif 
....................  
....................    UEIR=0; 
*
03E4:  CLRF   F6A
....................    UIR_UERR=0; 
03E6:  BCF    F68.1
.................... } 
03E8:  GOTO   0EE4 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_uidle() { 
....................    debug_usb(debug_putc,"I"); 
....................  
....................    UIE_ACTV=1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
048C:  BSF    F69.2
....................    UIR_IDLE=0; //clear idle interrupt flag 
048E:  BCF    F68.4
....................    UCON_SUSPND=1; //set suspend. we are now suspended 
0490:  BSF    F6D.1
.................... } 
0492:  GOTO   0EFC (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_activity() { 
....................    debug_usb(debug_putc,"A"); 
....................  
....................    UCON_SUSPND=0; //turn off low power suspending 
*
03DA:  BCF    F6D.1
....................    UIE_ACTV=0; //clear activity interupt enabling 
03DC:  BCF    F69.2
....................    UIR_ACTV=0; 
03DE:  BCF    F68.2
.................... } 
03E0:  GOTO   0ED2 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_stall(void) { 
....................    debug_usb(debug_putc,"S"); 
....................  
....................    if (bit_test(UEP(0),0)) { 
*
049C:  BTFSS  F70.0
049E:  BRA    04A4
....................       usb_init_ep0_setup(); 
04A0:  RCALL  0444
....................       bit_clear(UEP(0),0); 
04A2:  BCF    F70.0
....................    } 
....................    UIR_STALL=0; 
04A4:  BCF    F68.5
.................... } 
04A6:  GOTO   0F14 (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_tok_dne() { 
....................    int8 en; 
....................  
....................    en=USTAT>>3; 
*
0DCC:  RRCF   F6C,W
0DCE:  MOVLB  1
0DD0:  MOVWF  x23
0DD2:  RRCF   x23,F
0DD4:  RRCF   x23,F
0DD6:  MOVLW  1F
0DD8:  ANDWF  x23,F
....................  
....................          debug_usb(debug_putc,"T "); 
....................          debug_usb(debug_putc,"%X ", USTAT); 
....................  
....................       if (USTAT==USTAT_OUT_SETUP_E0) {   //new out or setup token in the buffer 
0DDA:  MOVF   F6C,F
0DDC:  BNZ   0E6A
....................          debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................          if ((EP_BDxST_O(0) & 0x3C)==USB_PIC_PID_SETUP) { 
0DDE:  MOVLB  4
0DE0:  MOVF   x00,W
0DE2:  ANDLW  3C
0DE4:  SUBLW  34
0DE6:  BNZ   0E2A
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
0DE8:  CLRF   x04
....................  
....................             debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................             debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................             usb_isr_tok_setup_dne(); 
0DEA:  MOVLB  0
0DEC:  BRA    0B54
....................  
....................             //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) 
....................             //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone 
....................             //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit 
....................             if (__setup_0_tx_size==0xFF) 
0DEE:  INCFSZ 20,W
0DF0:  BRA    0E00
....................                usb_flush_out(0,USB_DTS_STALL); 
0DF2:  MOVLB  1
0DF4:  CLRF   x24
0DF6:  MOVLW  03
0DF8:  MOVWF  x25
0DFA:  MOVLB  0
0DFC:  RCALL  0B7E
....................             else { 
0DFE:  BRA    0E24
....................                usb_flush_out(0,USB_DTS_TOGGLE); 
0E00:  MOVLB  1
0E02:  CLRF   x24
0E04:  MOVLW  02
0E06:  MOVWF  x25
0E08:  MOVLB  0
0E0A:  RCALL  0B7E
....................                if (__setup_0_tx_size!=0xFE) { 
0E0C:  MOVF   20,W
0E0E:  SUBLW  FE
0E10:  BZ    0E24
....................                   usb_flush_in(0,__setup_0_tx_size,USB_DTS_USERX); 
0E12:  MOVLB  1
0E14:  CLRF   x24
0E16:  CLRF   x26
0E18:  MOVFF  20,125
0E1C:  MOVLW  04
0E1E:  MOVWF  x27
0E20:  MOVLB  0
0E22:  RCALL  0C6C
....................                } 
....................             } 
....................             UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
0E24:  BCF    F6D.4
....................          } 
....................          else if ((EP_BDxST_O(0) & 0x3C)==USB_PIC_PID_OUT) { 
0E26:  BRA    0E64
0E28:  MOVLB  4
0E2A:  MOVF   x00,W
0E2C:  ANDLW  3C
0E2E:  SUBLW  04
0E30:  BNZ   0E66
....................             usb_isr_tok_out_dne(0); 
0E32:  MOVLB  1
0E34:  CLRF   x24
0E36:  MOVLB  0
0E38:  RCALL  0D4E
....................             usb_flush_out(0,USB_DTS_TOGGLE); 
0E3A:  MOVLB  1
0E3C:  CLRF   x24
0E3E:  MOVLW  02
0E40:  MOVWF  x25
0E42:  MOVLB  0
0E44:  RCALL  0B7E
....................             if ((__setup_0_tx_size!=0xFE)&&(__setup_0_tx_size!=0xFF)) { 
0E46:  MOVF   20,W
0E48:  SUBLW  FE
0E4A:  BZ    0E64
0E4C:  INCFSZ 20,W
0E4E:  BRA    0E52
0E50:  BRA    0E64
....................                usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
0E52:  MOVLB  1
0E54:  CLRF   x24
0E56:  CLRF   x26
0E58:  MOVFF  20,125
0E5C:  MOVLW  01
0E5E:  MOVWF  x27
0E60:  MOVLB  0
0E62:  RCALL  0C6C
0E64:  MOVLB  4
....................             } 
....................          } 
....................       } 
....................  
....................       else if (USTAT==USTAT_IN_E0) {   //pic -> host transfer completed 
0E66:  BRA    0EB6
0E68:  MOVLB  1
0E6A:  MOVF   F6C,W
0E6C:  SUBLW  04
0E6E:  BNZ   0E9C
....................          __setup_0_tx_size=0xFF; 
0E70:  MOVLW  FF
0E72:  MOVWF  20
....................          usb_isr_tok_in_dne(0); 
0E74:  CLRF   x24
0E76:  MOVLB  0
0E78:  RCALL  0DA8
....................          if (__setup_0_tx_size!=0xFF) 
0E7A:  INCFSZ 20,W
0E7C:  BRA    0E80
0E7E:  BRA    0E94
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_TOGGLE); 
0E80:  MOVLB  1
0E82:  CLRF   x24
0E84:  CLRF   x26
0E86:  MOVFF  20,125
0E8A:  MOVLW  02
0E8C:  MOVWF  x27
0E8E:  MOVLB  0
0E90:  RCALL  0C6C
....................          else 
0E92:  BRA    0E98
....................             usb_init_ep0_setup(); 
0E94:  CALL   0444
....................       } 
....................  
....................       else { 
0E98:  BRA    0EB4
0E9A:  MOVLB  1
....................          if (!bit_test(USTAT,2)) { 
0E9C:  BTFSC  F6C.2
0E9E:  BRA    0EAC
....................             usb_isr_tok_out_dne(en); 
0EA0:  MOVFF  123,124
0EA4:  MOVLB  0
0EA6:  RCALL  0D4E
....................          } 
....................          else { 
0EA8:  BRA    0EB4
0EAA:  MOVLB  1
....................             usb_isr_tok_in_dne(en); 
0EAC:  MOVFF  123,124
0EB0:  MOVLB  0
0EB2:  RCALL  0DA8
0EB4:  MOVLB  4
....................          } 
....................       } 
.................... } 
0EB6:  MOVLB  0
0EB8:  GOTO   0F1E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(int len) { 
....................    __setup_0_tx_size=len; 
*
04AA:  MOVFF  127,20
.................... } 
04AE:  RETLW  00
....................  
.................... void usb_request_get_data(void) { 
....................    __setup_0_tx_size=0xFE; 
.................... } 
....................  
.................... void usb_request_stall(void) { 
....................    __setup_0_tx_size=0xFF; 
04B0:  MOVLW  FF
04B2:  MOVWF  20
.................... } 
04B4:  RETLW  00
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #include "USB_18F4550_CONF.h"              
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... ////                   **** DEFINITIONS *****                          //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (FALSE) - Set to TRUE if your device supports        //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            Only the 18Fxx5x USB peripheral can    //// 
.................... ////                            have a value larger than 8.            //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE  //set to false to opt for less RAM, true to opt for less ROM 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     0 
.................... #define USB_ENABLE_BULK         0x01 
.................... #define USB_ENABLE_ISOCHRONOUS  0x02 
.................... #define USB_ENABLE_INTERRUPT    0x03 
.................... #define USB_ENABLE_CONTROL      0x04 
....................  
.................... //// DO NOT CHANGE THE FOLLOWING VALUES: 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #else 
.................... struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #endif 
....................  
.................... int16 __usb_kbhit_status; 
....................  
.................... /// *** User function prototypes 
.................... void usb_wait_for_enumeration(void); 
.................... int1 usb_unermated(void); 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout); 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout); 
....................  
.................... /// *** Token and request hanlder function prototypes 
.................... void usb_token_reset(); 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_request_send_response(int len);   //always sends usb_ep0_rx_buffer[] to endpoint 0 with a toggle of DATA 
....................  
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tok_in_dne(int8 endpoint); 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
....................  
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
....................  
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
....................  
.................... void usb_finish_set_address(void); 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
....................      const char USB_CLASS_SPECIFIC_DESC[] = { 
....................       6, 0, 255,    // Usage Page = Vendor Defined 
....................       9, 1,            // Usage = IO device 
....................       0xa1, 1,       // Collection = Application 
....................       0x19, 0,        // Usage minimum 
....................       0x29, 800,        // Usage maximum 
....................  
....................       0x15, 0x00,        // Logical minimum (-128) 
....................       0x25, 0xFF,        // Logical maximum (127) 
....................  
....................       0x75, 8,        // Report size = 8 (bits) 
....................       0x95, 128,        // Report count = 16 bits (2 bytes) 
....................       0x81, 2,        // Input (Data, Var, Abs) 
....................       0x19, 0,        // Usage minimum 
....................       0x29, 800,        // Usage maximum 
....................       0x75, 8,        // Report size = 8 (bits) 
....................       0x95, 128,        // Report count = 16 bits (2 bytes) 
....................       0x91, 2,        // Output (Data, Var, Abs) 
....................       0xc0            // End Collection 
....................    }; 
....................  
....................  
....................    //if a class has an extra descriptor not part of the config descriptor, 
....................    // this lookup table defines where to look for it in the const 
....................    // USB_CLASS_SPECIFIC_DESC[] array. 
....................    //first element is the config number (if your device has more than one config) 
....................    //second element is which interface number 
....................    //set element to 0xFFFF if this config/interface combo doesn't exist 
....................    const int16 USB_CLASS_SPECIFIC_DESC_LOOKUP[USB_NUM_CONFIGURATIONS][1] = 
....................    { 
....................    //config 1 
....................       //interface 0 
....................          0 
....................    }; 
....................  
....................    //if a class has an extra descriptor not part of the config descriptor, 
....................    // this lookup table defines the size of that descriptor. 
....................    //first element is the config number (if your device has more than one config) 
....................    //second element is which interface number 
....................    //set element to 0xFFFF if this config/interface combo doesn't exist 
....................    const int16 USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[USB_NUM_CONFIGURATIONS][1] = 
....................    { 
....................    //config 1 
....................       //interface 0 
....................          32 
....................    }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start config descriptor 
.................... ///   right now we only support one configuration descriptor. 
.................... ///   the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
....................    #DEFINE USB_TOTAL_CONFIG_LEN      41  //config+interface+class+endpoint+endpoint (2 endpoints) 
....................  
....................    const char USB_CONFIG_DESC[] = { 
....................    //IN ORDER TO COMPLY WITH WINDOWS HOSTS, THE ORDER OF THIS ARRAY MUST BE: 
....................       //    config(s) 
....................       //    interface(s) 
....................       //    class(es) 
....................       //    endpoint(s) 
....................  
....................    //config_descriptor for config index 1 
....................          USB_DESC_CONFIG_LEN, //length of descriptor size          ==1 
....................          USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (CONFIGURATION 0x02)     ==2 
....................          USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config      ==3,4 
....................          1, //number of interfaces this device supports       ==5 
....................          0x01, //identifier for this configuration.  (IF we had more than one configurations)      ==6 
....................          0x00, //index of string descriptor for this configuration      ==7 
....................          0x80, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 unused and bit7=1         ==8 
....................          50, //maximum bus power required (maximum milliamperes/2)  (100mA) 
....................  
....................    //interface descriptor 1 
....................          USB_DESC_INTERFACE_LEN, //length of descriptor      =10 
....................          USB_DESC_INTERFACE_TYPE, //constant INTERFACE (INTERFACE 0x04)       =11 
....................          0x00, //number defining this interface (IF we had more than one interface)    ==12 
....................          0x00, //alternate setting     ==13 
....................          2, //number of endpoins, except 0 (pic167xx has 3, but we dont have to use all).       ==14 
....................          0x03, //class code, 03 = HID     ==15 
....................          0x00, //subclass code //boot     ==16 
....................          0x00, //protocol code      ==17 
....................          0x00, //index of string descriptor for interface      ==18 
....................  
....................    //class descriptor 1  (HID) 
....................          USB_DESC_CLASS_LEN, //length of descriptor    ==19 
....................          USB_DESC_CLASS_TYPE, //dscriptor type (0x21 == HID)      ==20 
....................          0x11,0x01, //hid class release number (1.0) (try 1.10)      ==21,22 
....................          0x00, //localized country code (0 = none)       ==23 
....................          0x01, //number of hid class descrptors that follow (1)      ==24 
....................          0x22, //report descriptor type (0x22 == HID)                ==25 
....................          USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][0], 0x00, //length of report descriptor            ==26,27 
....................  
....................    //endpoint descriptor 
....................          USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==28 
....................          USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==29 
....................          0x81, //endpoint number and direction (0x81 = EP1 IN)       ==30 
....................          0x03, //transfer type supported (0x03 is interrupt)         ==31 
....................          USB_EP1_TX_SIZE,0x00, //maximum packet size supported                  ==32,33 
....................          10,  //polling interval, in ms.  (cant be smaller than 10)      ==34 
....................  
....................    //endpoint descriptor 
....................          USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==35 
....................          USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==36 
....................          0x01, //endpoint number and direction (0x01 = EP1 OUT)      ==37 
....................          0x03, //transfer type supported (0x03 is interrupt)         ==38 
....................          USB_EP1_RX_SIZE,0x00, //maximum packet size supported                  ==39,40 
....................          10 //polling interval, in ms.  (cant be smaller than 10)    ==41 
....................    }; 
....................  
....................    //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
....................    //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
....................    //  a specific descriptor in the above table. 
....................  
....................    //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
....................    //      FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
....................    #define USB_NUM_HID_INTERFACES   1 
....................  
....................    //the maximum number of interfaces seen on any config 
....................    //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
....................    #define USB_MAX_NUM_INTERFACES   1 
....................  
....................    //define how many interfaces there are per config.  [0] is the first config, etc. 
....................    const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
....................    //define where to find class descriptors 
....................    //first dimension is the config number 
....................    //second dimension specifies which interface 
....................    //last dimension specifies which class in this interface to get, but most will only have 1 class per interface 
....................    //if a class descriptor is not valid, set the value to 0xFFFF 
....................    const int16 USB_CLASS_DESCRIPTORS[USB_NUM_CONFIGURATIONS][1][1]= 
....................    { 
....................    //config 1 
....................       //interface 0 
....................          //class 1 
....................          18 
....................    }; 
....................  
....................    #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
....................       #error USB_TOTAL_CONFIG_LEN not defined correctly 
....................    #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
....................    const char USB_DEVICE_DESC[USB_DESC_DEVICE_LEN] ={ 
....................       //starts of with device configuration. only one possible 
....................          USB_DESC_DEVICE_LEN, //the length of this report   ==1 
....................          0x01, //the constant DEVICE (DEVICE 0x01)  ==2 
....................          0x00,0x02, //usb version in bcd  
....................          0x00, //class code ==5 
....................          0x00, //subclass code ==6 
....................          0x00, //protocol code ==7 
....................          USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) ==8 
....................          0x11,0x11, //vendor id (0x04D8 is Microchip, or is it 0x0461 ??) 
....................          0x11,0x11, //product id   ==11,12  //don't use ffff says usb-by-example guy.  oops 
....................          0x00,0x01, //device release number  ==13,14 
....................          0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below)  ==15 
....................          0x02, //index of string descriptor of the product  ==16 
....................          0x00, //index of string descriptor of serial number  ==17 
....................          USB_NUM_CONFIGURATIONS  //number of possible configurations  ==18 
....................    }; 
....................  
.................... //0xD8,0x04, //vendor id (0x04D8 is Microchip, or is it 0x0461 ??) 
.................... //0x00,0x0E, //product id   ==11,12  //don't use ffff says usb-by-example guy.  oops 
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start string descriptors 
.................... ///   String 0 is a special language string, and must be defined.  People in U.S.A. can leave this alone. 
.................... /// 
.................... ///   You must define the length else get_next_string_character() will not see the string 
.................... ///   Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string.  offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... char USB_STRING_DESC_OFFSET[]={0,4,12}; 
....................  
.................... char const USB_STRING_DESC[]={ 
....................    //string 0 
....................          4, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          0x09,0x04,   //Microsoft Defined for US-English 
....................    //string 1 
....................          8, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          't',0, 
....................          'm',0, 
....................          'c',0, 
....................    //string 2 
....................          58,                   //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          't',0, 
....................          'm',0, 
....................          'c',0, 
....................          'o',0, 
....................          'n',0, 
....................          'e',0, 
....................          ' ',0, 
....................          '(',0, 
....................          'C',0, 
....................          ')',0, 
....................          ' ',0, 
....................          'U',0, 
....................          's',0, 
....................          'b',0, 
....................          'H',0, 
....................          'I',0, 
....................          'D',0, 
....................          ' ',0, 
....................          'U',0, 
....................          'y',0, 
....................          'g',0, 
....................          'u',0, 
....................          'l',0, 
....................          'a',0, 
....................          'm',0, 
....................          'a',0, 
....................          's',0, 
....................          'i',0, 
....................          ' ',0 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #include <usb.c>    
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... //// Many settings important to the USB API are defined in usb.h.      //// 
.................... //// See the documentation in usb.h about these settings.              //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The following functions are of use to  //// 
.................... //// the user (for more docs on the functions, read the comments at    //// 
.................... //// each function):                                                   //// 
.................... ////                                                                   //// 
.................... ////    **********************  FUNCTIONS  ***********************     //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral until you //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit() - Returns true if OUT endpoint contains data from     //// 
.................... ////               host.                                               //// 
.................... ////                                                                   //// 
.................... //// usb_puts() - Sends a multiple packet message to the host          //// 
.................... ////                                                                   //// 
.................... //// usb_gets() - Gets multiple packets from the host                  //// 
.................... ////                                                                   //// 
.................... //// The rest of the functions in this file are part of the USB        //// 
.................... //// interrupt service routine and are not meant to be called by the   //// 
.................... //// user.                                                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must include the following functions:                             //// 
.................... ////                                                                   //// 
.................... //// void usb_stall_ep(int8 endpoint);                                 //// 
.................... //// void usb_unstall_ep(int8 endpoint);                               //// 
.................... //// int1 usb_endpoint_stalled(int8 endpoint);                         //// 
.................... //// void usb_set_address(int8 address);                               //// 
.................... //// void usb_set_configured(int config);                              //// 
.................... //// int8 usb_get_packet(int8 endpoint, int8 * ptr, int8 max);         //// 
.................... //// int1 usb_put_packet(int endpoint, int * ptr, int len, USB_DTS_BIT toggle); //// 
.................... //// void usb_request_send_response(int8 len);                                //// 
.................... //// int1 usb_kbhit(int8 endpoint);                                    //// 
.................... ////                                                                   //// 
.................... //// CCS provides a USB peripheral hardware layer for PIC16C7x5        //// 
.................... //// (pic_usb.h), 18Fxx5x (pic18_usb.h) and National's USBN960x        //// 
.................... //// (usbn960x.c).  See these files for more documentation.            //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... ////                   **** DEFINITIONS *****                          //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (FALSE) - Set to TRUE if your device supports        //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            Only the 18Fxx5x USB peripheral can    //// 
.................... ////                            have a value larger than 8.            //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE  //set to false to opt for less RAM, true to opt for less ROM 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     0 
.................... #define USB_ENABLE_BULK         0x01 
.................... #define USB_ENABLE_ISOCHRONOUS  0x02 
.................... #define USB_ENABLE_INTERRUPT    0x03 
.................... #define USB_ENABLE_CONTROL      0x04 
....................  
.................... //// DO NOT CHANGE THE FOLLOWING VALUES: 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #else 
.................... struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #endif 
....................  
.................... int16 __usb_kbhit_status; 
....................  
.................... /// *** User function prototypes 
.................... void usb_wait_for_enumeration(void); 
.................... int1 usb_unermated(void); 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout); 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout); 
....................  
.................... /// *** Token and request hanlder function prototypes 
.................... void usb_token_reset(); 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_request_send_response(int len);   //always sends usb_ep0_rx_buffer[] to endpoint 0 with a toggle of DATA 
....................  
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tok_in_dne(int8 endpoint); 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
....................  
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
....................  
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
....................  
.................... void usb_finish_set_address(void); 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #define usb_kbhit(x) bit_test(__usb_kbhit_status,x) 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: Use this to see if device is configured / enumerated. 
.................... /***************************************************************/ 
.................... #define usb_enumerated() (USB_stack_status.curr_config) 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void) { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
*
0FDA:  MOVF   1A,F
0FDC:  BNZ   0FE2
0FDE:  CLRWDT
0FE0:  BRA    0FDA
.................... } 
0FE2:  GOTO   1B68 (RETURN)
....................  
.................... /**************************************************************************** 
.................... /* usb_puts(endpoint, *ptr, len, timeout) 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before timeout. 
.................... /*                   set to 0 for no timeout. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  If sending 
.................... /*          only one packet it is more effecient to use only usb_put_packet() 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout) { 
....................    int16 i=0; 
....................    int1 res; 
....................    int16 this_packet_len; 
....................    int16 packet_size; 
....................    int32 timeout_1us; 
....................  
....................    packet_size=usb_ep_tx_size[endpoint]; 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len=packet_size;} 
....................       else {this_packet_len=len-i;} 
....................       do { 
....................          res=usb_put_packet(endpoint,ptr + i,this_packet_len,USB_DTS_TOGGLE);   //send 64 byte packets 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i+=packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res=usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before timeout. 
.................... /*                   set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /* NOTE: NOT THOUROUGHLY TESTED.  I AM NOT EVEN SURE IF THIS IS A GOOD IDEA 
.................... /* 
.................... /*****************************************************************************/ 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout) { 
....................    int16 ret=0; 
....................    int16 to; 
....................    int16 len; 
....................    int16 packet_size; 
....................    int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output: modifies global variables USB_Interface[], in[], usb_getdesc_ptr, 
.................... /*         usb_getdesc_len, USB_status_device, USB_dev_req 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset() { 
....................    int i; 
....................  
....................  
....................  
....................       for (i=0;i<USB_MAX_NUM_INTERFACES;i++) { 
*
03EC:  MOVLB  1
03EE:  CLRF   x23
03F0:  MOVF   x23,F
03F2:  BNZ   0408
....................          USB_Interface[i]=0;   //reset each interface to default 
03F4:  CLRF   03
03F6:  MOVF   x23,W
03F8:  ADDLW  27
03FA:  MOVWF  FE9
03FC:  MOVLW  00
03FE:  ADDWFC 03,W
0400:  MOVWF  FEA
0402:  CLRF   FEF
....................       } 
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) { 
....................        hid_protocol[i]=1; 
....................    } 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
0404:  INCF   x23,F
0406:  BRA    03F0
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................     USB_stack_status.curr_config=0;      //unconfigured device 
0408:  CLRF   1A
....................  
....................     USB_stack_status.status_device=1;    //previous state.  init at none 
040A:  MOVLW  01
040C:  MOVWF  1B
....................     USB_stack_status.dev_req=NONE;       //previous token request state.  init at none 
040E:  CLRF   19
.................... } 
0410:  MOVLB  0
0412:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... // 
.................... int1 usb_endpoint_is_valid(int8 endpoint) { 
....................    int1 direction; 
....................    direction = bit_test(endpoint,7); 
*
0996:  MOVLB  1
0998:  BCF    x25.0
099A:  BTFSC  x24.7
099C:  BSF    x25.0
....................    endpoint &= 0x7F; 
099E:  BCF    x24.7
....................    if (direction) { //IN 
09A0:  BTFSS  x25.0
09A2:  BRA    09CA
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
09A4:  CLRF   03
09A6:  MOVF   x24,W
09A8:  MOVFF  FF2,126
09AC:  BCF    FF2.7
09AE:  MOVLB  0
09B0:  CALL   009E
09B4:  MOVLB  1
09B6:  BTFSC  x26.7
09B8:  BSF    FF2.7
09BA:  XORLW  00
09BC:  BNZ   09C2
09BE:  MOVLW  00
09C0:  BRA    09C4
09C2:  MOVLW  01
09C4:  MOVWF  01
09C6:  BRA    09EE
....................    } 
....................    else {   //OUT 
09C8:  BRA    09EE
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
09CA:  CLRF   03
09CC:  MOVF   x24,W
09CE:  MOVFF  FF2,126
09D2:  BCF    FF2.7
09D4:  MOVLB  0
09D6:  CALL   009E
09DA:  MOVLB  1
09DC:  BTFSC  x26.7
09DE:  BSF    FF2.7
09E0:  XORLW  00
09E2:  BNZ   09E8
09E4:  MOVLW  00
09E6:  BRA    09EA
09E8:  MOVLW  01
09EA:  MOVWF  01
09EC:  BRA    09EE
....................    } 
.................... } 
09EE:  MOVLB  0
09F0:  GOTO   0AE0 (RETURN)
....................  
.................... ///---------------------------------------------------------------/// 
.................... /// Processing Message stages is the biggest portion of the ISR   /// 
.................... ///---------------------------------------------------------------/// 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token.  Should be 0. 
.................... /* 
.................... /* Summary: When receiving an IN token from the PC on endpoint 0 that means the 
.................... /*          host is asking for a response from a setup token, or the next packet 
.................... /*          from a currently processing token.  (For example, a 24 byte descriptor 
.................... /*          would require 3 IN tokens if the packet size is 8 bytes.)  USB_dev_req 
.................... /*          is a global variable that defines what setup token we are currently processing. 
.................... /* 
.................... /* Part of USB interrupt service routine. 
.................... /* Only checks endpoint 0. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
0DA8:  MOVLB  1
0DAA:  MOVF   x24,F
0DAC:  BNZ   0DC8
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
0DAE:  DECFSZ 19,W
0DB0:  BRA    0DBC
0DB2:  MOVLB  0
0DB4:  CALL   04B6
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
0DB8:  BRA    0DC6
0DBA:  MOVLB  1
0DBC:  MOVF   19,W
0DBE:  SUBLW  02
0DC0:  BNZ   0DC8
0DC2:  MOVLB  0
0DC4:  BRA    0D9A
0DC6:  MOVLB  1
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
0DC8:  MOVLB  0
0DCA:  RETLW  00
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data. 
.................... /*        This code doesn't allow reception of data from EP0. (Add later) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy incoming 
.................... /*          to the pic), but not out setup tokens.  Data is placed into a 
.................... /*          a buffer if it is empty, and the rx flag is set.  If the buffer 
.................... /*          is not empty then the overrun bit of that EP status byte is set it. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint) { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
0D4E:  MOVLB  1
0D50:  MOVF   x24,F
0D52:  BNZ   0D5E
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      #else 
....................       usb_init_ep0_setup(); 
0D54:  MOVLB  0
0D56:  CALL   0444
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    else { 
0D5A:  BRA    0D7C
0D5C:  MOVLB  1
....................       bit_set(__usb_kbhit_status,endpoint); 
0D5E:  CLRF   03
0D60:  MOVLW  01
0D62:  MOVWF  02
0D64:  MOVF   x24,W
0D66:  MOVWF  00
0D68:  BZ    0D74
0D6A:  BCF    FD8.0
0D6C:  RLCF   02,F
0D6E:  RLCF   03,F
0D70:  DECFSZ 00,F
0D72:  BRA    0D6A
0D74:  MOVF   02,W
0D76:  IORWF  1D,F
0D78:  MOVF   03,W
0D7A:  IORWF  1E,F
0D7C:  MOVLB  0
....................    } 
.................... } 
0D7E:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
.................... ////// HUGE - most of our code is to read setup messages //// 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the 8 bytes of the setup packet. 
.................... /* 
.................... /* Output: The DTS we expect for the next packet on OUT 0. 
.................... /* 
.................... /* Summary: This function is the start of code that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration, Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[8] now contains setup data packet, which has the following records 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
....................                                        (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet 
.................... /*                        for host-to-device, this exactly how many bytes in data packet 
.................... /*                        for device-to-host, this is the maximum bytes that can fit one packet 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void) { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
0B54:  CLRF   19
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
0B56:  MOVLB  5
0B58:  MOVF   x00,W
0B5A:  ANDLW  7F
0B5C:  MOVLB  0
0B5E:  BZ    0B6E
0B60:  XORLW  01
0B62:  BZ    0B70
0B64:  XORLW  03
0B66:  BZ    0B72
0B68:  XORLW  23
0B6A:  BZ    0B74
0B6C:  BRA    0B76
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
0B6E:  BRA    0830
....................          break; 
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
0B70:  BRA    08E6
....................          break; 
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
0B72:  BRA    0ADA
....................          break; 
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
0B74:  BRA    0B44
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
0B76:  RCALL  04B0
....................          break; 
0B78:  BRA    0B7A
....................    } 
.................... } 
0B7A:  GOTO   0DEE (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
0830:  MOVLB  5
0832:  MOVF   x01,W
0834:  MOVLB  0
0836:  BZ    0852
0838:  XORLW  01
083A:  BZ    0866
083C:  XORLW  02
083E:  BZ    0880
0840:  XORLW  06
0842:  BZ    0898
0844:  XORLW  03
0846:  BZ    08AA
0848:  XORLW  0E
084A:  BZ    08AE
084C:  XORLW  01
084E:  BZ    08BE
0850:  BRA    08DE
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
0852:  MOVFF  1B,540
....................             usb_ep0_tx_buffer[1]=0; 
0856:  MOVLB  5
0858:  CLRF   x41
....................             usb_request_send_response(2); 
085A:  MOVLW  02
085C:  MOVLB  1
085E:  MOVWF  x27
0860:  MOVLB  0
0862:  RCALL  04AA
....................             break; 
0864:  BRA    08E2
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0866:  MOVLB  5
0868:  DECFSZ x02,W
086A:  BRA    087A
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
086C:  MOVLW  01
086E:  ANDWF  1B,F
....................                usb_put_0len_0(); 
0870:  MOVLB  1
0872:  CLRF   x27
0874:  MOVLB  0
0876:  RCALL  04AA
....................             } 
....................             else 
0878:  BRA    087E
....................                usb_request_stall(); 
087A:  MOVLB  0
087C:  RCALL  04B0
....................             break; 
087E:  BRA    08E2
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0880:  MOVLB  5
0882:  DECFSZ x02,W
0884:  BRA    0892
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
0886:  BSF    1B.1
....................                usb_put_0len_0(); 
0888:  MOVLB  1
088A:  CLRF   x27
088C:  MOVLB  0
088E:  RCALL  04AA
....................             } 
....................             else 
0890:  BRA    0896
....................                usb_request_stall(); 
0892:  MOVLB  0
0894:  RCALL  04B0
....................             break; 
0896:  BRA    08E2
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
0898:  MOVLW  02
089A:  MOVWF  19
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
089C:  MOVFF  502,24
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................          	USB_stack_status.curr_config=0;	// make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
08A0:  MOVLB  1
08A2:  CLRF   x27
08A4:  MOVLB  0
08A6:  RCALL  04AA
....................             break; 
08A8:  BRA    08E2
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
08AA:  RCALL  057E
....................             break; 
08AC:  BRA    08E2
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
08AE:  MOVFF  1A,540
....................             usb_request_send_response(1); 
08B2:  MOVLW  01
08B4:  MOVLB  1
08B6:  MOVWF  x27
08B8:  MOVLB  0
08BA:  RCALL  04AA
....................             break; 
08BC:  BRA    08E2
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
08BE:  MOVLB  5
08C0:  MOVF   x02,W
08C2:  SUBLW  01
08C4:  BNC   08DA
....................                debug_usb(debug_putc,"SC"); 
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
08C6:  MOVFF  502,1A
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
08CA:  MOVFF  502,124
08CE:  MOVLB  0
08D0:  BRA    067E
....................                usb_put_0len_0(); 
08D2:  MOVLB  1
08D4:  CLRF   x27
08D6:  MOVLB  0
08D8:  RCALL  04AA
....................             } 
....................             break; 
08DA:  MOVLB  0
08DC:  BRA    08E2
....................  
....................       default: 
....................             usb_request_stall(); 
08DE:  RCALL  04B0
....................             break; 
08E0:  BRA    08E2
....................    } 
.................... } 
08E2:  GOTO   0B7A (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
08E6:  MOVFF  1A,124
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
08EA:  MOVLB  5
08EC:  MOVF   x01,W
08EE:  MOVLB  0
08F0:  BZ    0900
08F2:  XORLW  0A
08F4:  BZ    0912
08F6:  XORLW  01
08F8:  BZ    0960
08FA:  XORLW  0D
08FC:  BZ    098A
08FE:  BRA    098E
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
0900:  MOVLB  5
0902:  CLRF   x40
....................             usb_ep0_tx_buffer[1]=0; 
0904:  CLRF   x41
....................             usb_request_send_response(2); 
0906:  MOVLW  02
0908:  MOVLB  1
090A:  MOVWF  x27
090C:  MOVLB  0
090E:  RCALL  04AA
....................             break; 
0910:  BRA    0992
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
0912:  MOVLB  1
0914:  MOVF   x24,F
0916:  BZ    095A
0918:  MOVLW  01
091A:  SUBWF  x24,W
091C:  CLRF   03
091E:  MOVFF  FF2,126
0922:  BCF    FF2.7
0924:  MOVLB  0
0926:  RCALL  01BE
0928:  MOVLB  1
092A:  BTFSC  x26.7
092C:  BSF    FF2.7
092E:  MOVWF  01
0930:  MOVLB  5
0932:  SUBWF  x04,W
0934:  BTFSS  FD8.0
0936:  BRA    093C
0938:  MOVLB  1
093A:  BRA    095A
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
093C:  CLRF   03
093E:  MOVF   x04,W
0940:  ADDLW  27
0942:  MOVWF  FE9
0944:  MOVLW  00
0946:  ADDWFC 03,W
0948:  MOVWF  FEA
094A:  MOVFF  FEF,540
....................                usb_request_send_response(1);; //send byte back 
094E:  MOVLW  01
0950:  MOVLB  1
0952:  MOVWF  x27
0954:  MOVLB  0
0956:  RCALL  04AA
....................             } 
....................             else 
0958:  BRA    095E
....................                usb_request_stall(); 
095A:  MOVLB  0
095C:  RCALL  04B0
....................             break; 
095E:  BRA    0992
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
0960:  MOVLB  1
0962:  MOVF   x24,F
0964:  BZ    0984
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
0966:  CLRF   03
0968:  MOVLB  5
096A:  MOVF   x04,W
096C:  ADDLW  27
096E:  MOVWF  FE9
0970:  MOVLW  00
0972:  ADDWFC 03,W
0974:  MOVWF  FEA
0976:  MOVFF  502,FEF
....................                usb_put_0len_0(); 
097A:  MOVLB  1
097C:  CLRF   x27
097E:  MOVLB  0
0980:  RCALL  04AA
....................             } 
....................             else 
0982:  BRA    0988
....................                usb_request_stall(); 
0984:  MOVLB  0
0986:  RCALL  04B0
....................             break; 
0988:  BRA    0992
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
098A:  RCALL  057E
....................             break; 
098C:  BRA    0992
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
098E:  RCALL  04B0
....................             break; 
0990:  BRA    0992
....................    } 
.................... } 
0992:  GOTO   0B7A (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
0ADA:  MOVFF  504,124
0ADE:  BRA    0996
0AE0:  MOVF   01,F
0AE2:  BZ    0B40
....................       switch(usb_ep0_rx_buffer[1]) { 
0AE4:  MOVLB  5
0AE6:  MOVF   x01,W
0AE8:  XORLW  01
0AEA:  MOVLB  0
0AEC:  BZ    0AF8
0AEE:  XORLW  02
0AF0:  BZ    0B08
0AF2:  XORLW  03
0AF4:  BZ    0B18
0AF6:  BRA    0B3C
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
0AF8:  MOVFF  504,124
0AFC:  BRA    09F4
....................                usb_put_0len_0(); 
0AFE:  MOVLB  1
0B00:  CLRF   x27
0B02:  MOVLB  0
0B04:  RCALL  04AA
....................                break; 
0B06:  BRA    0B40
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
0B08:  MOVFF  504,124
0B0C:  BRA    0A3A
....................                      usb_put_0len_0(); 
0B0E:  MOVLB  1
0B10:  CLRF   x27
0B12:  MOVLB  0
0B14:  RCALL  04AA
....................                      break; 
0B16:  BRA    0B40
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
0B18:  MOVLB  5
0B1A:  CLRF   x40
....................                usb_ep0_tx_buffer[1]=0; 
0B1C:  CLRF   x41
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
0B1E:  MOVFF  504,124
0B22:  MOVLB  0
0B24:  BRA    0A82
0B26:  MOVF   01,F
0B28:  BZ    0B30
....................                   usb_ep0_tx_buffer[0]=1; 
0B2A:  MOVLW  01
0B2C:  MOVLB  5
0B2E:  MOVWF  x40
....................                } 
....................                usb_request_send_response(2); 
0B30:  MOVLW  02
0B32:  MOVLB  1
0B34:  MOVWF  x27
0B36:  MOVLB  0
0B38:  RCALL  04AA
....................                break; 
0B3A:  BRA    0B40
....................  
....................          default: 
....................             usb_request_stall(); 
0B3C:  RCALL  04B0
....................             break; 
0B3E:  BRA    0B40
....................       } 
....................    } 
.................... } 
0B40:  GOTO   0B7A (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
0B44:  MOVLB  5
0B46:  MOVF   x01,W
0B48:  BRA    0B4A
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
0B4A:  MOVLB  0
0B4C:  RCALL  04B0
....................             break; 
0B4E:  BRA    0B50
....................    } 
.................... } 
0B50:  GOTO   0B7A (RETURN)
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
057E:  CLRF   25
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
0580:  CLRF   1C
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
0582:  MOVLB  5
0584:  MOVF   x03,W
0586:  XORLW  01
0588:  MOVLB  0
058A:  BZ    059E
058C:  XORLW  03
058E:  BZ    05A8
0590:  XORLW  01
0592:  BZ    05AE
0594:  XORLW  22
0596:  BZ    05E0
0598:  XORLW  03
059A:  BZ    0608
059C:  BRA    0660
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
059E:  MOVLW  12
05A0:  MOVWF  26
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
05A2:  MOVLW  03
05A4:  MOVWF  1C
....................             break; 
05A6:  BRA    0664
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
05A8:  MOVLW  29
05AA:  MOVWF  26
....................             break; 
05AC:  BRA    0664
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
05AE:  MOVLW  02
05B0:  MOVWF  1C
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
05B2:  CLRF   03
05B4:  MOVLB  5
05B6:  MOVF   x02,W
05B8:  ADDLW  21
05BA:  MOVWF  FE9
05BC:  MOVLW  00
05BE:  ADDWFC 03,W
05C0:  MOVWF  FEA
05C2:  MOVFF  FEF,25
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
05C6:  CLRF   03
05C8:  MOVF   25,W
05CA:  MOVFF  FF2,125
05CE:  BCF    FF2.7
05D0:  MOVLB  0
05D2:  RCALL  01F2
05D4:  MOVLB  1
05D6:  BTFSC  x25.7
05D8:  BSF    FF2.7
05DA:  MOVWF  26
....................             break; 
05DC:  MOVLB  0
05DE:  BRA    0664
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][0]; 
05E0:  MOVLW  12
05E2:  MOVWF  25
....................             if (usb_getdesc_ptr!=0xFF) { 
05E4:  INCFSZ 25,W
05E6:  BRA    05EA
05E8:  BRA    0604
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
05EA:  CLRF   03
05EC:  MOVF   25,W
05EE:  MOVFF  FF2,125
05F2:  BCF    FF2.7
05F4:  RCALL  0184
05F6:  MOVLB  1
05F8:  BTFSC  x25.7
05FA:  BSF    FF2.7
05FC:  MOVWF  26
....................                break; 
05FE:  MOVLB  0
0600:  BRA    0664
....................             } 
....................             else { 
0602:  BRA    0608
....................                usb_request_stall(); 
0604:  RCALL  04B0
....................                return; 
0606:  BRA    067C
....................             } 
....................  
....................  
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
0608:  BCF    FD8.0
060A:  MOVLB  5
060C:  RLCF   x04,W
060E:  CLRF   03
0610:  MOVFF  FF2,125
0614:  BCF    FF2.7
0616:  MOVLB  0
0618:  RCALL  0160
061A:  TBLRD*+
061C:  MOVFF  FF5,03
0620:  MOVLB  1
0622:  BTFSC  x25.7
0624:  BSF    FF2.7
0626:  MOVWF  25
....................             if (usb_getdesc_ptr !=0xFF) { 
0628:  INCFSZ 25,W
062A:  BRA    062E
062C:  BRA    065A
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
062E:  MOVLW  01
0630:  MOVWF  1C
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
0632:  BCF    FD8.0
0634:  MOVLB  5
0636:  RLCF   x04,W
0638:  CLRF   03
063A:  MOVFF  FF2,125
063E:  BCF    FF2.7
0640:  MOVLB  0
0642:  RCALL  0172
0644:  TBLRD*+
0646:  MOVFF  FF5,03
064A:  MOVLB  1
064C:  BTFSC  x25.7
064E:  BSF    FF2.7
0650:  MOVWF  26
....................                break; 
0652:  MOVLB  0
0654:  BRA    0664
....................             } 
....................             else { 
0656:  BRA    0660
0658:  MOVLB  1
....................                usb_request_stall(); 
065A:  MOVLB  0
065C:  RCALL  04B0
....................                return; 
065E:  BRA    067C
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
0660:  RCALL  04B0
....................             return; 
0662:  BRA    067C
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
0664:  MOVLB  5
0666:  MOVF   x07,F
0668:  BNZ   0674
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
066A:  MOVF   26,W
066C:  SUBWF  x06,W
066E:  BC    0674
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
0670:  MOVFF  506,26
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
0674:  MOVLW  01
0676:  MOVWF  19
....................    usb_copy_desc_seg_to_ep(); 
0678:  MOVLB  0
067A:  RCALL  04B6
.................... } 
067C:  RETLW  00
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
.................... 	USB_stack_status.curr_config=0;	// make sure current configuration is 0 
*
0D9A:  CLRF   1A
....................  
....................    #ifdef __PIC__ 
.................... 	USB_stack_status.dev_req=NONE;  // no request pending 
0D9C:  CLRF   19
....................    usb_set_address(USB_address_pending); 
0D9E:  MOVFF  24,125
0DA2:  BRA    0D80
....................    #endif 
.................... } 
0DA4:  GOTO   0DC6 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
....................    int i=0; 
*
04B6:  MOVLB  1
04B8:  CLRF   x25
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
04BA:  MOVF   26,F
04BC:  BZ    0546
04BE:  MOVF   x25,W
04C0:  SUBLW  3F
04C2:  BNC   0546
....................       switch(USB_stack_status.getdesc_type) { 
04C4:  MOVF   1C,W
04C6:  ADDLW  FC
04C8:  BC    052C
04CA:  ADDLW  04
04CC:  MOVLB  0
04CE:  GOTO   055C
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
04D2:  CLRF   03
04D4:  MOVF   25,W
04D6:  MOVFF  FF2,127
04DA:  BCF    FF2.7
04DC:  RCALL  0184
04DE:  MOVLB  1
04E0:  BTFSC  x27.7
04E2:  BSF    FF2.7
04E4:  MOVWF  x26
....................             break; 
04E6:  BRA    052C
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
04E8:  CLRF   03
04EA:  MOVF   25,W
04EC:  MOVFF  FF2,127
04F0:  BCF    FF2.7
04F2:  RCALL  0130
04F4:  MOVLB  1
04F6:  BTFSC  x27.7
04F8:  BSF    FF2.7
04FA:  MOVWF  x26
....................             break; 
04FC:  BRA    052C
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
04FE:  CLRF   03
0500:  MOVF   25,W
0502:  MOVFF  FF2,127
0506:  BCF    FF2.7
0508:  RCALL  01F2
050A:  MOVLB  1
050C:  BTFSC  x27.7
050E:  BSF    FF2.7
0510:  MOVWF  x26
....................             break; 
0512:  BRA    052C
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
0514:  CLRF   03
0516:  MOVF   25,W
0518:  MOVFF  FF2,127
051C:  BCF    FF2.7
051E:  RCALL  01D0
0520:  MOVLB  1
0522:  BTFSC  x27.7
0524:  BSF    FF2.7
0526:  MOVWF  x26
....................             break; 
0528:  BRA    052C
052A:  MOVLB  1
....................       } 
....................       usb_getdesc_ptr++; 
052C:  INCF   25,F
....................       usb_getdesc_len--; 
052E:  DECF   26,F
....................       usb_ep0_tx_buffer[i++]=c; 
0530:  MOVF   x25,W
0532:  INCF   x25,F
0534:  CLRF   03
0536:  ADDLW  40
0538:  MOVWF  FE9
053A:  MOVLW  05
053C:  ADDWFC 03,W
053E:  MOVWF  FEA
0540:  MOVFF  126,FEF
....................    } 
0544:  BRA    04BA
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
0546:  MOVF   26,F
0548:  BNZ   0552
054A:  MOVF   x25,W
054C:  SUBLW  40
054E:  BZ    0552
....................          USB_stack_status.dev_req = NONE; 
0550:  CLRF   19
....................    } 
....................  
....................    usb_request_send_response(i); 
0552:  MOVFF  125,127
0556:  MOVLB  0
0558:  RCALL  04AA
.................... } 
055A:  RETLW  00
....................  
.................... #ENDIF 
....................  
.................... #use FAST_IO(A)         // I/O dir doesn't change when 
.................... #use FAST_IO(B)         // reading and writing to ports 
.................... #use FAST_IO(C) 
.................... #use FAST_IO(D) 
.................... unsigned int8 datain[8]; 
.................... unsigned int8 dataout[8]; 
.................... static unsigned int16 adc_read = 0; 
.................... static unsigned int16 pwmfreq = 255; 
.................... static unsigned int16 pwmduty = 128; 
.................... static unsigned int16 channel = 0; 
.................... static unsigned int16 pwmmode = 16; 
.................... unsigned int pwm1; 
.................... unsigned int x;  
.................... int i=0,r=0; 
.................... int al=1; 
.................... float floatveri; 
.................... char seri[7],veri; 
.................... char serial(); 
.................... void serigonder(); 
.................... float adc1,adc2,adc3,adc4,adc5,adc6,adc7,adc8,adc9,adc10,adc11,adc12,adc; 
.................... float readadc(int port); 
.................... char gonderilecekveri[128]; 
.................... void user_init(void)  
.................... {  
....................    disable_interrupts(GLOBAL);   
*
0F26:  BCF    FF2.6
0F28:  BCF    FF2.7
0F2A:  BTFSC  FF2.7
0F2C:  BRA    0F28
....................    set_tris_a(0xff); 
0F2E:  MOVLW  FF
0F30:  MOVWF  F92
....................    set_tris_b(0xff); 
0F32:  MOVWF  F93
....................    set_tris_e(0xff); 
0F34:  BSF    F96.0
0F36:  BSF    F96.1
0F38:  BSF    F96.2
....................    set_tris_c(0xBF); 
0F3A:  MOVLW  BF
0F3C:  MOVWF  F94
....................    setup_adc_ports(ALL_ANALOG);  // A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0   
0F3E:  MOVF   FC1,W
0F40:  ANDLW  C0
0F42:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_8);     
0F44:  BSF    FC0.0
0F46:  BCF    FC0.1
0F48:  BCF    FC0.2
0F4A:  BSF    FC0.7
0F4C:  BSF    FC2.0
....................    output_low(PIN_C1);   // Set CCP1 output low    
0F4E:  BCF    F8B.1
....................    setup_ccp1(CCP_PWM);  // Configure CCP1 as a PWM     
0F50:  BCF    F8B.2
0F52:  MOVLW  0C
0F54:  MOVWF  FBD
0F56:  CLRF   FB7
.................... }  
0F58:  GOTO   1B3A (RETURN)
.................... void send_data(unsigned int16 data)  
.................... {  
....................  dataout[0]=make8(data,0); 
....................  dataout[1]=make8(data,1);    
....................  usb_put_packet(1, dataout, 128, USB_DTS_TOGGLE); 
.................... } 
.................... float readadc(int port)  { 
....................  set_adc_channel(port); 
*
1132:  MOVLB  1
1134:  RLCF   x09,W
1136:  MOVWF  00
1138:  RLCF   00,F
113A:  MOVLW  FC
113C:  ANDWF  00,F
113E:  MOVF   FC2,W
1140:  ANDLW  C3
1142:  IORWF  00,W
1144:  MOVWF  FC2
....................  adc=read_adc();  
1146:  BSF    FC2.1
1148:  BTFSC  FC2.1
114A:  BRA    1148
114C:  MOVFF  FC4,03
1150:  MOVFF  FC3,10A
1154:  MOVFF  FC4,10B
1158:  MOVLB  0
115A:  BRA    10FA
115C:  MOVFF  03,86
1160:  MOVFF  02,85
1164:  MOVFF  01,84
1168:  MOVFF  00,83
....................  return adc; 
116C:  MOVFF  83,00
1170:  MOVFF  84,01
1174:  MOVFF  85,02
1178:  MOVFF  86,03
.................... } 
117C:  RETLW  00
.................... void serigonder() 
.................... { 
.................... sprintf(gonderilecekveri, 
.................... "%1.0f;%1.0f;%1.0f;%1.0f;"  
.................... "%1.0f;%1.0f;%1.0f;%1.0f;"  
.................... "%1.0f;%1.0f;%1.0f;%1.0f"  
.................... ,adc1,adc2,adc3,adc4,adc5,adc6,adc7,adc8,adc9,adc10,adc11,adc12); 
*
18C4:  MOVLB  1
18C6:  CLRF   x08
18C8:  MOVLW  87
18CA:  MOVWF  x07
18CC:  MOVLW  00
18CE:  MOVWF  FE9
18D0:  MOVFF  56,10C
18D4:  MOVFF  55,10B
18D8:  MOVFF  54,10A
18DC:  MOVFF  53,109
18E0:  CLRF   x0D
18E2:  MOVLB  0
18E4:  RCALL  135A
18E6:  MOVLW  3B
18E8:  MOVLB  1
18EA:  MOVWF  x16
18EC:  MOVLB  0
18EE:  RCALL  133A
18F0:  MOVLW  00
18F2:  MOVWF  FE9
18F4:  MOVFF  5A,10C
18F8:  MOVFF  59,10B
18FC:  MOVFF  58,10A
1900:  MOVFF  57,109
1904:  MOVLB  1
1906:  CLRF   x0D
1908:  MOVLB  0
190A:  RCALL  135A
190C:  MOVLW  3B
190E:  MOVLB  1
1910:  MOVWF  x16
1912:  MOVLB  0
1914:  RCALL  133A
1916:  MOVLW  00
1918:  MOVWF  FE9
191A:  MOVFF  5E,10C
191E:  MOVFF  5D,10B
1922:  MOVFF  5C,10A
1926:  MOVFF  5B,109
192A:  MOVLB  1
192C:  CLRF   x0D
192E:  MOVLB  0
1930:  RCALL  135A
1932:  MOVLW  3B
1934:  MOVLB  1
1936:  MOVWF  x16
1938:  MOVLB  0
193A:  RCALL  133A
193C:  MOVLW  00
193E:  MOVWF  FE9
1940:  MOVFF  62,10C
1944:  MOVFF  61,10B
1948:  MOVFF  60,10A
194C:  MOVFF  5F,109
1950:  MOVLB  1
1952:  CLRF   x0D
1954:  MOVLB  0
1956:  RCALL  135A
1958:  MOVLW  3B
195A:  MOVLB  1
195C:  MOVWF  x16
195E:  MOVLB  0
1960:  RCALL  133A
1962:  MOVLW  00
1964:  MOVWF  FE9
1966:  MOVFF  66,10C
196A:  MOVFF  65,10B
196E:  MOVFF  64,10A
1972:  MOVFF  63,109
1976:  MOVLB  1
1978:  CLRF   x0D
197A:  MOVLB  0
197C:  RCALL  135A
197E:  MOVLW  3B
1980:  MOVLB  1
1982:  MOVWF  x16
1984:  MOVLB  0
1986:  RCALL  133A
1988:  MOVLW  00
198A:  MOVWF  FE9
198C:  MOVFF  6A,10C
1990:  MOVFF  69,10B
1994:  MOVFF  68,10A
1998:  MOVFF  67,109
199C:  MOVLB  1
199E:  CLRF   x0D
19A0:  MOVLB  0
19A2:  RCALL  135A
19A4:  MOVLW  3B
19A6:  MOVLB  1
19A8:  MOVWF  x16
19AA:  MOVLB  0
19AC:  RCALL  133A
19AE:  MOVLW  00
19B0:  MOVWF  FE9
19B2:  MOVFF  6E,10C
19B6:  MOVFF  6D,10B
19BA:  MOVFF  6C,10A
19BE:  MOVFF  6B,109
19C2:  MOVLB  1
19C4:  CLRF   x0D
19C6:  MOVLB  0
19C8:  RCALL  135A
19CA:  MOVLW  3B
19CC:  MOVLB  1
19CE:  MOVWF  x16
19D0:  MOVLB  0
19D2:  RCALL  133A
19D4:  MOVLW  00
19D6:  MOVWF  FE9
19D8:  MOVFF  72,10C
19DC:  MOVFF  71,10B
19E0:  MOVFF  70,10A
19E4:  MOVFF  6F,109
19E8:  MOVLB  1
19EA:  CLRF   x0D
19EC:  MOVLB  0
19EE:  RCALL  135A
19F0:  MOVLW  3B
19F2:  MOVLB  1
19F4:  MOVWF  x16
19F6:  MOVLB  0
19F8:  RCALL  133A
19FA:  MOVLW  00
19FC:  MOVWF  FE9
19FE:  MOVFF  76,10C
1A02:  MOVFF  75,10B
1A06:  MOVFF  74,10A
1A0A:  MOVFF  73,109
1A0E:  MOVLB  1
1A10:  CLRF   x0D
1A12:  MOVLB  0
1A14:  RCALL  135A
1A16:  MOVLW  3B
1A18:  MOVLB  1
1A1A:  MOVWF  x16
1A1C:  MOVLB  0
1A1E:  RCALL  133A
1A20:  MOVLW  00
1A22:  MOVWF  FE9
1A24:  MOVFF  7A,10C
1A28:  MOVFF  79,10B
1A2C:  MOVFF  78,10A
1A30:  MOVFF  77,109
1A34:  MOVLB  1
1A36:  CLRF   x0D
1A38:  MOVLB  0
1A3A:  RCALL  135A
1A3C:  MOVLW  3B
1A3E:  MOVLB  1
1A40:  MOVWF  x16
1A42:  MOVLB  0
1A44:  RCALL  133A
1A46:  MOVLW  00
1A48:  MOVWF  FE9
1A4A:  MOVFF  7E,10C
1A4E:  MOVFF  7D,10B
1A52:  MOVFF  7C,10A
1A56:  MOVFF  7B,109
1A5A:  MOVLB  1
1A5C:  CLRF   x0D
1A5E:  MOVLB  0
1A60:  RCALL  135A
1A62:  MOVLW  3B
1A64:  MOVLB  1
1A66:  MOVWF  x16
1A68:  MOVLB  0
1A6A:  RCALL  133A
1A6C:  MOVLW  00
1A6E:  MOVWF  FE9
1A70:  MOVFF  82,10C
1A74:  MOVFF  81,10B
1A78:  MOVFF  80,10A
1A7C:  MOVFF  7F,109
1A80:  MOVLB  1
1A82:  CLRF   x0D
1A84:  MOVLB  0
1A86:  RCALL  135A
.................... puts(gonderilecekveri); 
1A88:  CLRF   FEA
1A8A:  MOVLW  87
1A8C:  MOVWF  FE9
1A8E:  MOVLW  00
1A90:  IORWF  FEF,W
1A92:  BZ    1AA4
1A94:  MOVF   FEF,W
1A96:  BTFSS  F9E.4
1A98:  BRA    1A96
1A9A:  MOVWF  FAD
1A9C:  INCF   FE9,F
1A9E:  BTFSC  FD8.2
1AA0:  INCF   FEA,F
1AA2:  BRA    1A8E
1AA4:  MOVLW  0D
1AA6:  BTFSS  F9E.4
1AA8:  BRA    1AA6
1AAA:  MOVWF  FAD
1AAC:  MOVLW  0A
1AAE:  BTFSS  F9E.4
1AB0:  BRA    1AAE
1AB2:  MOVWF  FAD
.................... }void usbgonder() 
1AB4:  GOTO   1F56 (RETURN)
.................... { 
.................... sprintf(gonderilecekveri, 
.................... "%1.0f;%1.0f;%1.0f;%1.0f;"  
.................... "%1.0f;%1.0f;%1.0f;%1.0f;"  
.................... "%1.0f;%1.0f;%1.0f;%1.0f"  
.................... ,adc1,adc2,adc3,adc4,adc5,adc6,adc7,adc8,adc9,adc10,adc11,adc12); 
*
15C2:  MOVLB  1
15C4:  CLRF   x08
15C6:  MOVLW  87
15C8:  MOVWF  x07
15CA:  MOVLW  00
15CC:  MOVWF  FE9
15CE:  MOVFF  56,10C
15D2:  MOVFF  55,10B
15D6:  MOVFF  54,10A
15DA:  MOVFF  53,109
15DE:  CLRF   x0D
15E0:  MOVLB  0
15E2:  RCALL  135A
15E4:  MOVLW  3B
15E6:  MOVLB  1
15E8:  MOVWF  x16
15EA:  MOVLB  0
15EC:  RCALL  133A
15EE:  MOVLW  00
15F0:  MOVWF  FE9
15F2:  MOVFF  5A,10C
15F6:  MOVFF  59,10B
15FA:  MOVFF  58,10A
15FE:  MOVFF  57,109
1602:  MOVLB  1
1604:  CLRF   x0D
1606:  MOVLB  0
1608:  RCALL  135A
160A:  MOVLW  3B
160C:  MOVLB  1
160E:  MOVWF  x16
1610:  MOVLB  0
1612:  RCALL  133A
1614:  MOVLW  00
1616:  MOVWF  FE9
1618:  MOVFF  5E,10C
161C:  MOVFF  5D,10B
1620:  MOVFF  5C,10A
1624:  MOVFF  5B,109
1628:  MOVLB  1
162A:  CLRF   x0D
162C:  MOVLB  0
162E:  RCALL  135A
1630:  MOVLW  3B
1632:  MOVLB  1
1634:  MOVWF  x16
1636:  MOVLB  0
1638:  RCALL  133A
163A:  MOVLW  00
163C:  MOVWF  FE9
163E:  MOVFF  62,10C
1642:  MOVFF  61,10B
1646:  MOVFF  60,10A
164A:  MOVFF  5F,109
164E:  MOVLB  1
1650:  CLRF   x0D
1652:  MOVLB  0
1654:  RCALL  135A
1656:  MOVLW  3B
1658:  MOVLB  1
165A:  MOVWF  x16
165C:  MOVLB  0
165E:  RCALL  133A
1660:  MOVLW  00
1662:  MOVWF  FE9
1664:  MOVFF  66,10C
1668:  MOVFF  65,10B
166C:  MOVFF  64,10A
1670:  MOVFF  63,109
1674:  MOVLB  1
1676:  CLRF   x0D
1678:  MOVLB  0
167A:  RCALL  135A
167C:  MOVLW  3B
167E:  MOVLB  1
1680:  MOVWF  x16
1682:  MOVLB  0
1684:  RCALL  133A
1686:  MOVLW  00
1688:  MOVWF  FE9
168A:  MOVFF  6A,10C
168E:  MOVFF  69,10B
1692:  MOVFF  68,10A
1696:  MOVFF  67,109
169A:  MOVLB  1
169C:  CLRF   x0D
169E:  MOVLB  0
16A0:  RCALL  135A
16A2:  MOVLW  3B
16A4:  MOVLB  1
16A6:  MOVWF  x16
16A8:  MOVLB  0
16AA:  RCALL  133A
16AC:  MOVLW  00
16AE:  MOVWF  FE9
16B0:  MOVFF  6E,10C
16B4:  MOVFF  6D,10B
16B8:  MOVFF  6C,10A
16BC:  MOVFF  6B,109
16C0:  MOVLB  1
16C2:  CLRF   x0D
16C4:  MOVLB  0
16C6:  RCALL  135A
16C8:  MOVLW  3B
16CA:  MOVLB  1
16CC:  MOVWF  x16
16CE:  MOVLB  0
16D0:  RCALL  133A
16D2:  MOVLW  00
16D4:  MOVWF  FE9
16D6:  MOVFF  72,10C
16DA:  MOVFF  71,10B
16DE:  MOVFF  70,10A
16E2:  MOVFF  6F,109
16E6:  MOVLB  1
16E8:  CLRF   x0D
16EA:  MOVLB  0
16EC:  RCALL  135A
16EE:  MOVLW  3B
16F0:  MOVLB  1
16F2:  MOVWF  x16
16F4:  MOVLB  0
16F6:  RCALL  133A
16F8:  MOVLW  00
16FA:  MOVWF  FE9
16FC:  MOVFF  76,10C
1700:  MOVFF  75,10B
1704:  MOVFF  74,10A
1708:  MOVFF  73,109
170C:  MOVLB  1
170E:  CLRF   x0D
1710:  MOVLB  0
1712:  RCALL  135A
1714:  MOVLW  3B
1716:  MOVLB  1
1718:  MOVWF  x16
171A:  MOVLB  0
171C:  RCALL  133A
171E:  MOVLW  00
1720:  MOVWF  FE9
1722:  MOVFF  7A,10C
1726:  MOVFF  79,10B
172A:  MOVFF  78,10A
172E:  MOVFF  77,109
1732:  MOVLB  1
1734:  CLRF   x0D
1736:  MOVLB  0
1738:  RCALL  135A
173A:  MOVLW  3B
173C:  MOVLB  1
173E:  MOVWF  x16
1740:  MOVLB  0
1742:  RCALL  133A
1744:  MOVLW  00
1746:  MOVWF  FE9
1748:  MOVFF  7E,10C
174C:  MOVFF  7D,10B
1750:  MOVFF  7C,10A
1754:  MOVFF  7B,109
1758:  MOVLB  1
175A:  CLRF   x0D
175C:  MOVLB  0
175E:  RCALL  135A
1760:  MOVLW  3B
1762:  MOVLB  1
1764:  MOVWF  x16
1766:  MOVLB  0
1768:  RCALL  133A
176A:  MOVLW  00
176C:  MOVWF  FE9
176E:  MOVFF  82,10C
1772:  MOVFF  81,10B
1776:  MOVFF  80,10A
177A:  MOVFF  7F,109
177E:  MOVLB  1
1780:  CLRF   x0D
1782:  MOVLB  0
1784:  RCALL  135A
.................... usb_put_packet(1, gonderilecekveri,128, USB_DTS_TOGGLE); 
1786:  MOVLW  01
1788:  MOVLB  1
178A:  MOVWF  x09
178C:  CLRF   x0B
178E:  MOVLW  87
1790:  MOVWF  x0A
1792:  CLRF   x0D
1794:  MOVLW  80
1796:  MOVWF  x0C
1798:  MOVLW  02
179A:  MOVWF  x0E
179C:  MOVLB  0
179E:  BRA    1504
.................... printf("\r\n USB Data Sent:%s",gonderilecekveri); 
17A0:  MOVLB  1
17A2:  CLRF   x09
17A4:  MOVF   x09,W
17A6:  MOVLB  0
17A8:  CALL   024A
17AC:  MOVLB  1
17AE:  INCF   x09,F
17B0:  MOVWF  00
17B2:  MOVF   00,W
17B4:  BTFSS  F9E.4
17B6:  BRA    17B4
17B8:  MOVWF  FAD
17BA:  MOVLW  11
17BC:  SUBWF  x09,W
17BE:  BNZ   17A4
17C0:  CLRF   FEA
17C2:  MOVLW  87
17C4:  MOVWF  FE9
17C6:  MOVLW  00
17C8:  IORWF  FEF,W
17CA:  BZ    17DC
17CC:  MOVF   FEF,W
17CE:  BTFSS  F9E.4
17D0:  BRA    17CE
17D2:  MOVWF  FAD
17D4:  INCF   FE9,F
17D6:  BTFSC  FD8.2
17D8:  INCF   FEA,F
17DA:  BRA    17C6
.................... } 
17DC:  MOVLB  1
17DE:  GOTO   1F86 (RETURN)
....................  
.................... void main(void)  
.................... { printf("\r\n USB Connecting");           
*
1AB8:  CLRF   FF8
1ABA:  BCF    FD0.7
1ABC:  BSF    0D.7
1ABE:  CLRF   FEA
1AC0:  CLRF   FE9
1AC2:  BSF    FB8.3
1AC4:  MOVLW  08
1AC6:  MOVWF  FAF
1AC8:  MOVLW  02
1ACA:  MOVWF  FB0
1ACC:  MOVLW  A6
1ACE:  MOVWF  FAC
1AD0:  MOVLW  90
1AD2:  MOVWF  FAB
1AD4:  MOVF   FC1,W
1AD6:  ANDLW  C0
1AD8:  IORLW  0F
1ADA:  MOVWF  FC1
1ADC:  MOVLW  07
1ADE:  MOVWF  FB4
1AE0:  CLRF   1F
1AE2:  CLRF   21
1AE4:  MOVLW  04
1AE6:  MOVWF  22
1AE8:  MOVLW  0C
1AEA:  MOVWF  23
1AEC:  CLRF   26
1AEE:  CLRF   38
1AF0:  CLRF   39
1AF2:  MOVLW  FF
1AF4:  MOVWF  3A
1AF6:  CLRF   3B
1AF8:  MOVLW  80
1AFA:  MOVWF  3C
1AFC:  CLRF   3D
1AFE:  CLRF   3E
1B00:  CLRF   3F
1B02:  MOVLW  10
1B04:  MOVWF  40
1B06:  CLRF   41
1B08:  CLRF   44
1B0A:  CLRF   45
1B0C:  MOVLW  01
1B0E:  MOVWF  46
1B10:  MOVLB  1
1B12:  CLRF   x07
1B14:  CLRF   x08
1B16:  CLRF   x09
1B18:  MOVF   x09,W
1B1A:  MOVLB  0
1B1C:  CALL   0278
1B20:  MOVLB  1
1B22:  INCF   x09,F
1B24:  MOVWF  00
1B26:  MOVF   00,W
1B28:  BTFSS  F9E.4
1B2A:  BRA    1B28
1B2C:  MOVWF  FAD
1B2E:  MOVLW  11
1B30:  SUBWF  x09,W
1B32:  BNZ   1B18
....................    user_init();  
1B34:  MOVLB  0
1B36:  GOTO   0F26
....................    usb_init();   
1B3A:  GOTO   0FCC
....................    usb_task(); 
1B3E:  CALL   0FAA
....................    printf("\r\n Wait_for_enumeration");         
1B42:  MOVLB  1
1B44:  CLRF   x09
1B46:  MOVF   x09,W
1B48:  MOVLB  0
1B4A:  CALL   02A4
1B4E:  MOVLB  1
1B50:  INCF   x09,F
1B52:  MOVWF  00
1B54:  MOVF   00,W
1B56:  BTFSS  F9E.4
1B58:  BRA    1B56
1B5A:  MOVWF  FAD
1B5C:  MOVLW  17
1B5E:  SUBWF  x09,W
1B60:  BNZ   1B46
....................    usb_wait_for_enumeration(); 
1B62:  MOVLB  0
1B64:  GOTO   0FDA
....................    if(usb_enumerated())  
1B68:  MOVF   1A,F
1B6A:  BZ    1B8E
....................    printf("\r\n USB Connected"); 
1B6C:  MOVLB  1
1B6E:  CLRF   x09
1B70:  MOVF   x09,W
1B72:  MOVLB  0
1B74:  CALL   02D6
1B78:  MOVLB  1
1B7A:  INCF   x09,F
1B7C:  MOVWF  00
1B7E:  MOVF   00,W
1B80:  BTFSS  F9E.4
1B82:  BRA    1B80
1B84:  MOVWF  FAD
1B86:  MOVLW  10
1B88:  SUBWF  x09,W
1B8A:  BNZ   1B70
1B8C:  MOVLB  0
....................    output_low(PIN_B0);      
1B8E:  BCF    F8A.0
....................    for (;;)  
....................    {        
....................       while(usb_enumerated())  
....................       {                      
1B90:  MOVF   1A,F
1B92:  BTFSC  FD8.2
1B94:  BRA    1F8A
....................        if (usb_kbhit(1))             //Eðer pc'den yeni bir paket geldiyse 
1B96:  BTFSS  1D.1
1B98:  BRA    1F88
....................                {              
....................                      usb_get_packet(1, datain, 8); //paketi oku     
1B9A:  MOVLW  01
1B9C:  MOVLB  1
1B9E:  MOVWF  x09
1BA0:  CLRF   x0B
1BA2:  MOVLW  28
1BA4:  MOVWF  x0A
1BA6:  CLRF   x0D
1BA8:  MOVLW  08
1BAA:  MOVWF  x0C
1BAC:  MOVLB  0
1BAE:  GOTO   10B2
....................                     // printf("\r\nPaket1: %d",datain[0]);   
....................                      switch(datain[0])             
....................                      { 
1BB2:  MOVF   28,W
1BB4:  XORLW  43
1BB6:  BZ    1BE6
1BB8:  XORLW  06
1BBA:  BZ    1C0A
1BBC:  XORLW  04
1BBE:  BZ    1C2E
1BC0:  XORLW  11
1BC2:  BTFSC  FD8.2
1BC4:  BRA    1D7E
1BC6:  XORLW  03
1BC8:  BTFSC  FD8.2
1BCA:  BRA    1DEE
1BCC:  XORLW  17
1BCE:  BTFSC  FD8.2
1BD0:  BRA    1E1A
1BD2:  XORLW  02
1BD4:  BTFSC  FD8.2
1BD6:  BRA    1E9C
1BD8:  XORLW  14
1BDA:  BTFSC  FD8.2
1BDC:  BRA    1F54
1BDE:  XORLW  06
1BE0:  BTFSC  FD8.2
1BE2:  BRA    1F5C
1BE4:  BRA    1F82
....................                         case 'C': 
....................                         {                   
....................                             printf("\r\n PC CONNECTED");                              
1BE6:  MOVLB  1
1BE8:  CLRF   x09
1BEA:  MOVF   x09,W
1BEC:  MOVLB  0
1BEE:  CALL   0302
1BF2:  MOVLB  1
1BF4:  INCF   x09,F
1BF6:  MOVWF  00
1BF8:  MOVF   00,W
1BFA:  BTFSS  F9E.4
1BFC:  BRA    1BFA
1BFE:  MOVWF  FAD
1C00:  MOVLW  0F
1C02:  SUBWF  x09,W
1C04:  BNZ   1BEA
....................                             break; 
1C06:  BRA    1F86
1C08:  MOVLB  0
....................                         }   
....................                         case 'E': 
....................                         {                   
....................                             printf("\r\n PC DISCONNECTED");                              
1C0A:  MOVLB  1
1C0C:  CLRF   x09
1C0E:  MOVF   x09,W
1C10:  MOVLB  0
1C12:  CALL   032C
1C16:  MOVLB  1
1C18:  INCF   x09,F
1C1A:  MOVWF  00
1C1C:  MOVF   00,W
1C1E:  BTFSS  F9E.4
1C20:  BRA    1C1E
1C22:  MOVWF  FAD
1C24:  MOVLW  12
1C26:  SUBWF  x09,W
1C28:  BNZ   1C0E
....................                             break; 
1C2A:  BRA    1F86
1C2C:  MOVLB  0
....................                         }    
....................                        case 'A': 
....................                         {  
....................                              adc1=readadc(0); 
1C2E:  MOVLB  1
1C30:  CLRF   x09
1C32:  MOVLB  0
1C34:  CALL   1132
1C38:  MOVFF  03,56
1C3C:  MOVFF  02,55
1C40:  MOVFF  01,54
1C44:  MOVFF  00,53
....................                              adc2=readadc(1); 
1C48:  MOVLW  01
1C4A:  MOVLB  1
1C4C:  MOVWF  x09
1C4E:  MOVLB  0
1C50:  CALL   1132
1C54:  MOVFF  03,5A
1C58:  MOVFF  02,59
1C5C:  MOVFF  01,58
1C60:  MOVFF  00,57
....................                              adc3=readadc(3); 
1C64:  MOVLW  03
1C66:  MOVLB  1
1C68:  MOVWF  x09
1C6A:  MOVLB  0
1C6C:  CALL   1132
1C70:  MOVFF  03,5E
1C74:  MOVFF  02,5D
1C78:  MOVFF  01,5C
1C7C:  MOVFF  00,5B
....................                              adc4=readadc(4); 
1C80:  MOVLW  04
1C82:  MOVLB  1
1C84:  MOVWF  x09
1C86:  MOVLB  0
1C88:  CALL   1132
1C8C:  MOVFF  03,62
1C90:  MOVFF  02,61
1C94:  MOVFF  01,60
1C98:  MOVFF  00,5F
....................                              adc5=readadc(5); 
1C9C:  MOVLW  05
1C9E:  MOVLB  1
1CA0:  MOVWF  x09
1CA2:  MOVLB  0
1CA4:  CALL   1132
1CA8:  MOVFF  03,66
1CAC:  MOVFF  02,65
1CB0:  MOVFF  01,64
1CB4:  MOVFF  00,63
....................                              adc6=readadc(6); 
1CB8:  MOVLW  06
1CBA:  MOVLB  1
1CBC:  MOVWF  x09
1CBE:  MOVLB  0
1CC0:  CALL   1132
1CC4:  MOVFF  03,6A
1CC8:  MOVFF  02,69
1CCC:  MOVFF  01,68
1CD0:  MOVFF  00,67
....................                              adc7=readadc(7); 
1CD4:  MOVLW  07
1CD6:  MOVLB  1
1CD8:  MOVWF  x09
1CDA:  MOVLB  0
1CDC:  CALL   1132
1CE0:  MOVFF  03,6E
1CE4:  MOVFF  02,6D
1CE8:  MOVFF  01,6C
1CEC:  MOVFF  00,6B
....................                              adc8=readadc(8); 
1CF0:  MOVLW  08
1CF2:  MOVLB  1
1CF4:  MOVWF  x09
1CF6:  MOVLB  0
1CF8:  CALL   1132
1CFC:  MOVFF  03,72
1D00:  MOVFF  02,71
1D04:  MOVFF  01,70
1D08:  MOVFF  00,6F
....................                              adc9=readadc(9); 
1D0C:  MOVLW  09
1D0E:  MOVLB  1
1D10:  MOVWF  x09
1D12:  MOVLB  0
1D14:  CALL   1132
1D18:  MOVFF  03,76
1D1C:  MOVFF  02,75
1D20:  MOVFF  01,74
1D24:  MOVFF  00,73
....................                              adc10=readadc(10); 
1D28:  MOVLW  0A
1D2A:  MOVLB  1
1D2C:  MOVWF  x09
1D2E:  MOVLB  0
1D30:  CALL   1132
1D34:  MOVFF  03,7A
1D38:  MOVFF  02,79
1D3C:  MOVFF  01,78
1D40:  MOVFF  00,77
....................                              adc11=readadc(11); 
1D44:  MOVLW  0B
1D46:  MOVLB  1
1D48:  MOVWF  x09
1D4A:  MOVLB  0
1D4C:  CALL   1132
1D50:  MOVFF  03,7E
1D54:  MOVFF  02,7D
1D58:  MOVFF  01,7C
1D5C:  MOVFF  00,7B
....................                              adc12=readadc(12);  
1D60:  MOVLW  0C
1D62:  MOVLB  1
1D64:  MOVWF  x09
1D66:  MOVLB  0
1D68:  CALL   1132
1D6C:  MOVFF  03,82
1D70:  MOVFF  02,81
1D74:  MOVFF  01,80
1D78:  MOVFF  00,7F
....................                              usbgonder();                                                         
1D7C:  BRA    15C2
....................                             break; 
....................                         }          
....................                         case 'P': 
....................                         {                          
....................                            x = (unsigned int) pwmduty; 
1D7E:  MOVFF  3C,43
....................                            pwmmode=datain[1]; 
1D82:  CLRF   41
1D84:  MOVFF  29,40
....................                            if(pwmmode==1) 
1D88:  DECFSZ 40,W
1D8A:  BRA    1D9C
1D8C:  MOVF   41,F
1D8E:  BNZ   1D9C
....................                            setup_timer_2(T2_DIV_BY_1,pwmfreq,1);   
1D90:  MOVLW  00
1D92:  IORLW  04
1D94:  MOVWF  FCA
1D96:  MOVFF  3A,FCB
....................                            else if(pwmmode==4) 
1D9A:  BRA    1DC6
1D9C:  MOVF   40,W
1D9E:  SUBLW  04
1DA0:  BNZ   1DB2
1DA2:  MOVF   41,F
1DA4:  BNZ   1DB2
....................                            setup_timer_2(T2_DIV_BY_4,pwmfreq,1);                              
1DA6:  MOVLW  00
1DA8:  IORLW  05
1DAA:  MOVWF  FCA
1DAC:  MOVFF  3A,FCB
....................                            else if(pwmmode==16) 
1DB0:  BRA    1DC6
1DB2:  MOVF   40,W
1DB4:  SUBLW  10
1DB6:  BNZ   1DC6
1DB8:  MOVF   41,F
1DBA:  BNZ   1DC6
....................                            setup_timer_2(T2_DIV_BY_16,pwmfreq,1);   
1DBC:  MOVLW  00
1DBE:  IORLW  06
1DC0:  MOVWF  FCA
1DC2:  MOVFF  3A,FCB
....................                            set_pwm1_duty(x);                            
1DC6:  MOVFF  43,FBE
....................                            printf("\r\n PWM START");                           
1DCA:  MOVLB  1
1DCC:  CLRF   x09
1DCE:  MOVF   x09,W
1DD0:  MOVLB  0
1DD2:  CALL   035A
1DD6:  MOVLB  1
1DD8:  INCF   x09,F
1DDA:  MOVWF  00
1DDC:  MOVF   00,W
1DDE:  BTFSS  F9E.4
1DE0:  BRA    1DDE
1DE2:  MOVWF  FAD
1DE4:  MOVLW  0C
1DE6:  SUBWF  x09,W
1DE8:  BNZ   1DCE
....................                            break; 
1DEA:  BRA    1F86
1DEC:  MOVLB  0
....................                         }                         
....................                         case 'S': 
....................                         {  
....................                            set_pwm1_duty(0L);                           
1DEE:  CLRF   FBE
1DF0:  MOVF   FBD,W
1DF2:  ANDLW  CF
1DF4:  MOVWF  FBD
....................                            printf("\r\n PWM STOP");                            
1DF6:  MOVLB  1
1DF8:  CLRF   x09
1DFA:  MOVF   x09,W
1DFC:  MOVLB  0
1DFE:  CALL   0382
1E02:  MOVLB  1
1E04:  INCF   x09,F
1E06:  MOVWF  00
1E08:  MOVF   00,W
1E0A:  BTFSS  F9E.4
1E0C:  BRA    1E0A
1E0E:  MOVWF  FAD
1E10:  MOVLW  0B
1E12:  SUBWF  x09,W
1E14:  BNZ   1DFA
....................                            break; 
1E16:  BRA    1F86
1E18:  MOVLB  0
....................                         }                                         
....................                         case 'D': 
....................                         {  
....................                          pwmduty=datain[1]; 
1E1A:  CLRF   3D
1E1C:  MOVFF  29,3C
....................                          if(pwmduty>255)pwmduty=255; 
1E20:  MOVF   3D,W
1E22:  SUBLW  00
1E24:  BC    1E2C
1E26:  CLRF   3D
1E28:  MOVLW  FF
1E2A:  MOVWF  3C
....................                          if(pwmduty<0)pwmduty=0;                         
....................                          x = (unsigned int) pwmduty; 
1E2C:  MOVFF  3C,43
....................                          set_pwm1_duty(x);  
1E30:  MOVFF  43,FBE
....................                          printf("\r\n PWM: %Ld  DUTY: %Ld",pwmfreq,pwmduty);                          
1E34:  MOVLB  1
1E36:  CLRF   x09
1E38:  MOVF   x09,W
1E3A:  MOVLB  0
1E3C:  CALL   03A8
1E40:  MOVLB  1
1E42:  INCF   x09,F
1E44:  MOVWF  00
1E46:  MOVF   00,W
1E48:  BTFSS  F9E.4
1E4A:  BRA    1E48
1E4C:  MOVWF  FAD
1E4E:  MOVLW  08
1E50:  SUBWF  x09,W
1E52:  BNZ   1E38
1E54:  MOVLW  10
1E56:  MOVWF  FE9
1E58:  MOVFF  3B,10C
1E5C:  MOVFF  3A,10B
1E60:  MOVLB  0
1E62:  RCALL  17E2
1E64:  MOVLW  0B
1E66:  MOVLB  1
1E68:  MOVWF  x0A
1E6A:  MOVF   x0A,W
1E6C:  MOVLB  0
1E6E:  CALL   03A8
1E72:  MOVLB  1
1E74:  INCF   x0A,F
1E76:  MOVWF  00
1E78:  MOVF   00,W
1E7A:  BTFSS  F9E.4
1E7C:  BRA    1E7A
1E7E:  MOVWF  FAD
1E80:  MOVLW  13
1E82:  SUBWF  x0A,W
1E84:  BNZ   1E6A
1E86:  MOVLW  10
1E88:  MOVWF  FE9
1E8A:  MOVFF  3D,10C
1E8E:  MOVFF  3C,10B
1E92:  MOVLB  0
1E94:  RCALL  17E2
....................                            break; 
1E96:  MOVLB  1
1E98:  BRA    1F86
1E9A:  MOVLB  0
....................                         } 
....................                         case 'F': 
....................                         {                            
....................                          pwmfreq=datain[1]; 
1E9C:  CLRF   3B
1E9E:  MOVFF  29,3A
....................                          if(pwmfreq>255)pwmfreq=255; 
1EA2:  MOVF   3B,W
1EA4:  SUBLW  00
1EA6:  BC    1EAE
1EA8:  CLRF   3B
1EAA:  MOVLW  FF
1EAC:  MOVWF  3A
....................                          if(pwmfreq<0)pwmfreq=0;                         
....................                          if(pwmmode==1) 
1EAE:  DECFSZ 40,W
1EB0:  BRA    1EC2
1EB2:  MOVF   41,F
1EB4:  BNZ   1EC2
....................                            setup_timer_2(T2_DIV_BY_1,pwmfreq,1);   
1EB6:  MOVLW  00
1EB8:  IORLW  04
1EBA:  MOVWF  FCA
1EBC:  MOVFF  3A,FCB
....................                            else if(pwmmode==4) 
1EC0:  BRA    1EEC
1EC2:  MOVF   40,W
1EC4:  SUBLW  04
1EC6:  BNZ   1ED8
1EC8:  MOVF   41,F
1ECA:  BNZ   1ED8
....................                            setup_timer_2(T2_DIV_BY_4,pwmfreq,1);                              
1ECC:  MOVLW  00
1ECE:  IORLW  05
1ED0:  MOVWF  FCA
1ED2:  MOVFF  3A,FCB
....................                            else if(pwmmode==16) 
1ED6:  BRA    1EEC
1ED8:  MOVF   40,W
1EDA:  SUBLW  10
1EDC:  BNZ   1EEC
1EDE:  MOVF   41,F
1EE0:  BNZ   1EEC
....................                            setup_timer_2(T2_DIV_BY_16,pwmfreq,1);   
1EE2:  MOVLW  00
1EE4:  IORLW  06
1EE6:  MOVWF  FCA
1EE8:  MOVFF  3A,FCB
....................                            printf("\r\n PWM: %Ld  DUTY: %Ld",pwmfreq,pwmduty);                          
1EEC:  MOVLB  1
1EEE:  CLRF   x09
1EF0:  MOVF   x09,W
1EF2:  MOVLB  0
1EF4:  CALL   03A8
1EF8:  MOVLB  1
1EFA:  INCF   x09,F
1EFC:  MOVWF  00
1EFE:  MOVF   00,W
1F00:  BTFSS  F9E.4
1F02:  BRA    1F00
1F04:  MOVWF  FAD
1F06:  MOVLW  08
1F08:  SUBWF  x09,W
1F0A:  BNZ   1EF0
1F0C:  MOVLW  10
1F0E:  MOVWF  FE9
1F10:  MOVFF  3B,10C
1F14:  MOVFF  3A,10B
1F18:  MOVLB  0
1F1A:  RCALL  17E2
1F1C:  MOVLW  0B
1F1E:  MOVLB  1
1F20:  MOVWF  x0A
1F22:  MOVF   x0A,W
1F24:  MOVLB  0
1F26:  CALL   03A8
1F2A:  MOVLB  1
1F2C:  INCF   x0A,F
1F2E:  MOVWF  00
1F30:  MOVF   00,W
1F32:  BTFSS  F9E.4
1F34:  BRA    1F32
1F36:  MOVWF  FAD
1F38:  MOVLW  13
1F3A:  SUBWF  x0A,W
1F3C:  BNZ   1F22
1F3E:  MOVLW  10
1F40:  MOVWF  FE9
1F42:  MOVFF  3D,10C
1F46:  MOVFF  3C,10B
1F4A:  MOVLB  0
1F4C:  RCALL  17E2
....................                            break; 
1F4E:  MOVLB  1
1F50:  BRA    1F86
1F52:  MOVLB  0
....................                         } 
....................                        case 'R': 
....................                         {                               
....................                          serigonder();                                    
1F54:  BRA    18C4
....................                          break; 
1F56:  MOVLB  1
1F58:  BRA    1F86
1F5A:  MOVLB  0
....................                         } 
....................                        case 'T': 
....................                         {                               
....................                          putc('T'); 
1F5C:  MOVLW  54
1F5E:  BTFSS  F9E.4
1F60:  BRA    1F5E
1F62:  MOVWF  FAD
....................                          putc('E'); 
1F64:  MOVLW  45
1F66:  BTFSS  F9E.4
1F68:  BRA    1F66
1F6A:  MOVWF  FAD
....................                          putc('S'); 
1F6C:  MOVLW  53
1F6E:  BTFSS  F9E.4
1F70:  BRA    1F6E
1F72:  MOVWF  FAD
....................                          putc('T');                          
1F74:  MOVLW  54
1F76:  BTFSS  F9E.4
1F78:  BRA    1F76
1F7A:  MOVWF  FAD
....................                          break; 
1F7C:  MOVLB  1
1F7E:  BRA    1F86
1F80:  MOVLB  0
....................                         } 
....................                         default: 
....................                         {                             
....................                          break; 
1F82:  MOVLB  1
1F84:  BRA    1F86
1F86:  MOVLB  0
....................                      }                         
....................                   }                          
....................                }   
....................       }  
1F88:  BRA    1B90
....................         
....................  } 
1F8A:  BRA    1B90
....................  
.................... }  
....................      
....................                                
....................  
....................    
1F8C:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   NOIESO NOFCMEN HSPLL PLL5 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0300   PBADEN CCP2C1 NOMCLR NOLPT1OSC RESERVED
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT RESERVED
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
